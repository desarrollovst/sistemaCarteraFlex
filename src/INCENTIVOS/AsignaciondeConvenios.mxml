<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="709" height="544" 
	backgroundAlpha="1.0" creationPolicy="all" creationComplete="initApp()" 
	backgroundColor="#FFFFFF" xmlns:Data="Data.*" x="12.5" y="42">
	
	<mx:Script>    
    <![CDATA[
    	import as3xls.xls.Cell;
        import as3xls.xls.ExcelFile;
        import as3xls.xls.Sheet;
    	import Data.ExcelExportXls;
    	import Data.Globales;
    	import Data.Utils; 
    	import mx.collections.ArrayCollection;
        import mx.controls.Alert; 
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.core.Application; 	
        import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.soap.WebService; 
         
      	private var fileReference:FileReference;
      	private var global:Globales;
      	private var du:Utils;
      	private var sheet:Sheet;
      	private var wsMS:WebService;
      	private var titulo:String;
      	
      	private var asesor:Array;
      	private var fecIni:Array;
      	private var fecFin:Array;
      	private var monto:Array;
      	private var tipo:Array;
      	
        private var infoObj:ArrayCollection = new ArrayCollection();
        public var _xmlRep:XML = new XML();
      	
      	private function addProperty(cellObject:Object,index:int,cellValue:String):void{
            if(index == 0)
                cellObject.NOMINA = cellValue;
            else if(index == 1)
            	//se utiliza la funcion formatoFechaExcel para transformar el valor numerico de fecha
                cellObject.FINICIO = global.formatearFechaExcel(Number(cellValue));
            else if(index == 2)
            	//se utiliza la funcion formatoFechaExcel para transformar el valor numerico de fecha
                cellObject.FFIN = global.formatearFechaExcel(Number(cellValue));
            else if(index == 3)
                cellObject.MONTO = cellValue;
            else if(index == 4)
                cellObject.TIPO = cellValue;             
        }
      	 
       	private function buscarArchivo():void{
       		var fileFilter:FileFilter = new FileFilter("Excel (.xls)", "*.xls;");
       		
       		try{
	       		fileReference = new FileReference();
	            fileReference.addEventListener(Event.SELECT,fileReference_Select);
	            fileReference.addEventListener(Event.CANCEL,fileReference_Cancel);
	            fileReference.browse([fileFilter]);
	    	}
         	catch (error:Error){
         		 Alert.show(error.message,titulo,4,null,null,global.iAlert);
         		 return;
         	}
        }
        
        private function calcularTotalConv():Number{
        	var info:ArrayCollection = dgInfo.dataProvider as ArrayCollection;
        	var total:Number = 0;
        	
        	for(var i:int = 0; i <= info.length - 1; i++){
        		total += Number(info[i].MONTO);
        	}
        	return total;
        }
        
        private function cargarInfo():void{
        	if(formateaInfo() == true){
	        	initConexion();
				du.sCursor();
				global.bloquear();
				
				wsMS.addEventListener(ResultEvent.RESULT, setRegistroConvenio);
				wsMS.setAccionAsignaciondeConvenios.send(asesor, fecIni, fecFin, monto, tipo, global.obtenerUsuario(), 1);
        	}
        }
        
		private function exportar():void{
			var dgE:ExcelExportXls = new ExcelExportXls();
			dgE.loadDGInExcel(dgInfo,null,titulo);		
		}
        
        private function formateaInfo():Boolean{
        	var info:ArrayCollection = dgInfo.dataProvider as ArrayCollection;
			asesor = new Array;
			fecIni = new Array;
			fecFin = new Array;
			monto = new Array;
			tipo = new Array;
			
			for (var i:int = 0; i < info.length; i++){
				asesor[i] = info[i].NOMINA;
				fecIni[i] = info[i].FINICIO;
				fecFin[i] = info[i].FFIN;
			 	monto[i] = info[i].MONTO;
			 	tipo[i] = info[i].TIPO;
			}
			return true;
        }
        
        private function fileReference_Select(event:Event):void{
	    	fileReference.addEventListener(ProgressEvent.PROGRESS,fileReference_Progress);
	        fileReference.addEventListener(Event.COMPLETE,fileReference_Complete);
	        fileReference.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);
	        fileReference.load(); 
	        txtArchivo.text = fileReference.name;
	        lblResultado.text = "";
        }
        
        private function fileReference_Cancel(event:Event):void{
            fileReference = null;
        }
        
        private function fileReference_Progress(event:ProgressEvent):void{
            //progressBar.visible = true;
            //progressBar.includeInLayout = true;
        }
       
        private function fileReference_Complete(event:Event):void{
            try{
	            dgInfo.dataProvider = null;
	            infoObj.removeAll();
	            infoObj.refresh();
	            btnCargar.visible = true;
	            btnExportar.visible = false;
	            
	            var fileData:ByteArray  = fileReference.data;
	            var excelFile:ExcelFile = new ExcelFile();
	            var totalConv:Number;
	            var filas:int;
	            var cols:int;
	            
	            if(fileData != null && fileData.length > 0){
	            	excelFile.loadFromByteArray(fileData);
	                var sheet:Sheet = excelFile.sheets[0];
	                if(sheet != null){
	            	    filas = sheet.rows;
	                    cols = sheet.cols;
	                    for(var i:int = 1; i < filas; i++){
	                	    var cellObject:Object = {};
	                        for(var j:int = 0; j < cols; j++){
	                    	    var cell:Cell = new Cell();
	                            var cellValue:String = new String();
	                            cell = sheet.getCell(i, j);
	                            if(cell != null){
	                            	cellValue =(cell.value).toString();
	                                addProperty(cellObject, j, cellValue);
	                            }
	                     	}  
	                        infoObj.addItem(cellObject);
	                        dgInfo.dataProvider = infoObj;
	                    } 
	                    filas--;
	                    totalConv = calcularTotalConv();
	                    lblResultado.text = "Total Convenios: " + global.formatearMoneda(totalConv.toString()) + " - " + filas + " Registro(s) Encontrado(s)";
	                }    
	            } 
	            dgInfo.includeInLayout = true;
	            dgInfo.visible = true;
	            fileReference = null;
	            btnCargar.enabled = true;
            }
            catch (error:Error){
         		 Alert.show(error.message,titulo,4,null,null,global.iAlert);
         		 return;
         	}
        }  
        
      	private function initApp():void{ 
	    	global = new Globales();
	    	du = new Utils();
	        titulo = "Carga Archivo Asignación de Convenios";
	      	lblTitulo.text = titulo.toUpperCase();  
	    }    
	    
	    public function initConexion():void{				
			wsMS = new WebService();			
			wsMS.wsdl = Application.application.wsStr.wsdlIncR.toString();
			wsMS.loadWSDL();
		}	
		
		public function initConexionRep():void{				
			wsMS = new WebService();			
			wsMS.wsdl = Application.application.wsStr.wsdlIncC.toString();
			wsMS.loadWSDL();
		}
		
		private function onLoadError():void{
        	/*body not implemented*/
        }
        
	    private function setRegistroConvenio(event:ResultEvent):void{
			wsMS.disconnect();
			du.rCursor();
			global.desbloquear();
			wsMS.removeEventListener(ResultEvent.RESULT, setRegistroConvenio);
			wsMS = null;
			var res:String = event.result.toString();
			if (res.substr(0,1) == "1"){
				initConexionRep();
				du.sCursor();
				global.bloquear();
				dgInfo.dataProvider = null;	
					
				du.ejecutaWsMethod(wsMS,function(evt:ResultEvent):void {											
					_xmlRep = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsMS);	
					global.desbloquear();
						
					var cont:int = _xmlRep.elements().length();	
					dgInfo.dataProvider = _xmlRep.Table;
					lblResultado.text = cont + " Registro(s) Procesado(s)";
					btnCargar.visible = false;
					
					if(cont > 0)
						btnExportar.visible = true;					
				});
				//Método que obtiene el resultado del proceso de carga de archivo de asignacion de Convenios
				wsMS.getAsignaciondeConvenios.send(global.obtenerUsuario());	
			}	
			else
				Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);		
		}
	     
    ]]>
  	</mx:Script>
  	<mx:Canvas x="10" y="39" width="689" height="499" styleName="canvasMod">
  		<mx:Button label="Cargar Archivo" id="btnCargar" enabled="false" x="288.5" y="463" click="cargarInfo()"/>
		<mx:Button label="Buscar" id="btnBuscar" enabled="true" click="buscarArchivo()" x="395.85" y="431"/>
		<mx:TextInput id="txtArchivo" editable="false" enabled="true" x="227.85" y="431" width="160"/>
		<mx:DataGrid id="dgInfo" x="10" y="10" width="667" height="353" horizontalScrollPolicy="auto">
			<mx:columns>
				<mx:DataGridColumn headerText="NÓMINA ASESOR" dataField="NOMINA" width="120"/>
				<mx:DataGridColumn headerText="FECHA INICIO" dataField="FINICIO" width="100"/>
				<mx:DataGridColumn headerText="FECHA FIN" dataField="FFIN" width="90"/>
				<mx:DataGridColumn headerText="MONTO" dataField="MONTO" width="110"/>
				<mx:DataGridColumn headerText="TIPO" dataField="TIPO" width="110"/>
				<mx:DataGridColumn headerText="ESTATUS" dataField="ESTATUS" width="80"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Label id="lblResultado" x="148.6" y="400" width="389.75" fontStyle="italic" fontWeight="bold" fontSize="12" textAlign="center"/>
		<mx:Button label="Exportar Excel" id="btnExportar" visible="false" x="292" y="463" click="exportar()"/>
		<mx:Label x="10" y="371" text="Tipo:     S = Suma Convenio           R = Respeta Convenio" fontWeight="bold" fontSize="12" fontStyle="italic" width="351" id="lbl1"/>
  	</mx:Canvas>
	<mx:Label id="lblTitulo" x="10" y="10" width="410" fontSize="12" fontWeight="bold" fontStyle="italic"/>
</mx:Canvas>