<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	 creationPolicy="all" creationComplete="initApp()" xmlns:Data="Data.*" x="12.5" y="42">
	<mx:states>
		<mx:State name="banorte">
			<mx:SetProperty target="{cnvCarga}" name="height" value="640"/>
			<mx:AddChild position="lastChild">
				<mx:Canvas x="10" y="157" width="689" height="471" styleName="canvasMod" id="canvas1">
					<mx:Button label="Cargar Archivo" id="btnCargar" enabled="false" x="288.5" y="434" click="cargarInfo()"/>
					<mx:Button label="Buscar" id="btnBuscar" enabled="true" click="buscarArchivo()" x="395.85" y="402"/>
					<mx:TextInput id="txtArchivo" editable="false" enabled="true" x="227.85" y="402" width="160"/>
					<mx:DataGrid id="dgBanorte" x="10" y="10" width="667" height="353" horizontalScrollPolicy="auto">
						<mx:columns>
							<mx:DataGridColumn headerText="FECHA OPERACION" dataField="FECOPE" width="120"/>
							<mx:DataGridColumn headerText="FECHA" dataField="FECHA" width="80"/>
							<mx:DataGridColumn headerText="REFERENCIA" dataField="REFERENCIA" width="100"/>
							<mx:DataGridColumn headerText="DESCRIPCION" dataField="DESCRIPCION" width="150"/>
							<mx:DataGridColumn headerText="COD TRANSAC" dataField="CODTRANS" width="100"/>
							<mx:DataGridColumn headerText="SUCURSAL" dataField="SUCURSAL" width="90"/>
							<mx:DataGridColumn headerText="DEPOSITOS" dataField="DEPOSITOS" width="90"/>
							<mx:DataGridColumn headerText="RETIROS" dataField="RETIROS" width="90"/>
							<mx:DataGridColumn headerText="SALDO" dataField="SALDO" width="80"/>
							<mx:DataGridColumn headerText="MOVIMIENTO" dataField="MOVIMIENTO" width="90"/>
							<mx:DataGridColumn headerText="DESCRIPCION DETALLADA" dataField="DESCDET" width="140"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:Label id="lblResultado" x="10" y="371" width="667" fontStyle="italic" fontWeight="bold" fontSize="12" textAlign="center"/>
					<mx:Button label="Exportar" id="btnExportar" visible="false" x="269.5" y="434" click="exportar()"/>
					<mx:Button label="Limpiar" id="btnLimpiar" visible="false" x="349.5" y="434" click="limpiarForm()"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:SetProperty target="{cnvCarga}" name="width" value="710"/>
		</mx:State>
		<mx:State name="bancomer" basedOn="banorte">
			<mx:RemoveChild target="{dgBanorte}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:DataGrid id="dgBancomer" x="10" y="10" width="667" height="353" horizontalScrollPolicy="auto">
					<mx:columns>
						<mx:DataGridColumn headerText="FECHA" dataField="FECHA" width="80"/>
						<mx:DataGridColumn headerText="CONCEPTO / REFERENCIA" dataField="DESCRIPCION" width="150"/>
						<mx:DataGridColumn headerText="CARGOS" dataField="RETIROS" width="90"/>
						<mx:DataGridColumn headerText="ABONOS" dataField="DEPOSITOS" width="90"/>
						<mx:DataGridColumn headerText="SALDO" dataField="SALDO" width="80"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
		</mx:State>
		<mx:State name="banamex" basedOn="banorte">
			<mx:RemoveChild target="{dgBanorte}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:DataGrid id="dgBanamex" x="8.5" y="10" width="670" height="353" horizontalScrollPolicy="auto">
					<mx:columns>
						<mx:DataGridColumn headerText="FECHA" dataField="FECHA" width="80"/>
						<mx:DataGridColumn headerText="DESCRIPCION" dataField="DESCRIPCION" width="150"/>
						<mx:DataGridColumn headerText="DEPOSITOS" dataField="DEPOSITOS" width="90"/>
						<mx:DataGridColumn headerText="RETIROS" dataField="RETIROS" width="90"/>
						<mx:DataGridColumn headerText="SALDO" dataField="SALDO" width="60"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
		</mx:State>
		<mx:State name="scotiabank" basedOn="banorte">
			<mx:RemoveChild target="{dgBanorte}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:DataGrid id="dgScotia" x="10" y="10" width="667" height="353" horizontalScrollPolicy="auto">
					<mx:columns>
						<mx:DataGridColumn headerText="NUMERO" dataField="NUMERO" width="60"/>
						<mx:DataGridColumn headerText="FECHA" dataField="FECHA" width="80"/>
						<mx:DataGridColumn headerText="REFERENCIA" dataField="REFERENCIA" width="100"/>
						<mx:DataGridColumn headerText="IMPORTE" dataField="IMPORTE" width="90"/>
						<mx:DataGridColumn headerText="TIPO" dataField="TIPO" width="80"/>
						<mx:DataGridColumn headerText="TRANSACCION" dataField="DESCRIPCION" width="150"/>
						<mx:DataGridColumn headerText="SALDO" dataField="SALDO" width="80"/>
						<mx:DataGridColumn headerText="LEYENDA 1" dataField="DESCDET" width="80"/>
						<mx:DataGridColumn headerText="LEYENDA 2" dataField="REF2" width="80"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">		
			<mx:Sequence>
				<mx:Resize duration="500" target="{cnvCarga}"/> 
				<mx:AddChildAction duration="500" target="{canvas1}"/>
			</mx:Sequence>		
		</mx:Transition>
	</mx:transitions>
	
	<mx:Script>    
    <![CDATA[
    	import mx.messaging.channels.StreamingAMFChannel;
    	import mx.charts.chartClasses.DataDescription;
    	import as3xls.xls.Cell;
        import as3xls.xls.ExcelFile;
        import as3xls.xls.Sheet;
    	import Data.ExcelExportXls;
    	import Data.Globales;
    	import Data.Utils; 
    	import mx.collections.ArrayCollection;
        import mx.controls.Alert; 
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.core.Application; 
        import mx.events.ListEvent;		
        import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.soap.WebService; 
         
      	private var fileReference:FileReference;
      	private var sheet:Sheet;
      	private var wsMS:WebService;
      	private var wsRep:WebService;
      	private var titulo:String;
		private var du:Utils;
		private var global:Globales;
      	
      	private var fecOpe:Array;
      	private var fecha:Array;
      	private var referencia:Array;
      	private var desc:Array;
      	private var codTrans:Array;
      	private var sucursal:Array;
      	private var depositos:Array;
      	private var retiros:Array;
      	private var saldo:Array;
      	private var movto:Array;
      	private var descDet:Array;
      	private var ref2:Array;
      	private var importe:Array;
      	private var tipo:Array;
      	
        private var infoObj:ArrayCollection = new ArrayCollection();
        private var banObj:ArrayCollection = new ArrayCollection();
        private var ctaObj:ArrayCollection = new ArrayCollection();
		private var _xmlRep:XML = new XML();
		private var _xmlBan:XML = new XML();
		private var _xmlCta:XML = new XML();	
		private var _xmlDatos:XML = new XML();
		private var _xmlInfo:XML = new XML();
      	 
       	private function buscarArchivo():void{
       		var fileFilter:FileFilter = new FileFilter("Excel (.xls)", "*.xls;");
       		
       		try{
	       		fileReference = new FileReference();
	            fileReference.addEventListener(Event.SELECT,fileReference_Select);
	            fileReference.addEventListener(Event.CANCEL,fileReference_Cancel);
	            fileReference.browse([fileFilter]);
	    	}
         	catch (error:Error){
         		 Alert.show(error.message,titulo,4,null,null,global.iAlert);
         		 return;
         	}
        }
        
        private function buscarCuenta():void{
        	var wsCat:WebService = new WebService;
        	var params:Array = new Array;
        	
        	ctaObj.removeAll();
        	ctaObj.refresh();
        	cboCuenta.dataProvider = ctaObj;
        	
        	du.initWsCat(wsCat);
        	du.sCursor();
        	
        	du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
				_xmlCta = new XML(evt.result.toString());
						
				if(_xmlCta.elements().length() > 0){
					formateaCuenta();
					cboCuenta.dataProvider = ctaObj;
					cboCuenta.selectedIndex = 0;
				}	
					
				du.rCursor();
				du.closeWs(wsCat);					
			});
			//MÃ©todo que obtiene las cuentas de desembolso del banco seleccionado
			params[0] = cboBanco.selectedItem.id;
			wsCat.getListado.send(62, params);	
        }
        
        private function cargarInfo():void{
        	if(valida()){
	        	if(formateaInfo()){
	        		var dgInfo:DataGrid = obtenerGrid();
	        		var banco:String = cboBanco.selectedItem.id;
	        		var cuenta:String = cboCuenta.selectedItem.id;
	        		var fecEdo:String = dtfFecha.text;
	        		
	        		var wsCat:WebService = new WebService;
					var params:Array = new Array;
					
					du.initWsCat(wsCat);
					du.sCursor();
					global.bloquear();
					
					//Servicio que busca la existencia de los estados de cuenta
					du.ejecutaWsMethod(wsCat,function(event:ResultEvent):void{		
						_xmlDatos = new XML(event.result);
						
						du.closeWs(wsCat);
						
						if(_xmlDatos.elements().length() >0){
							Alert.show("Ya existen registros para el Estado de Cuenta.",titulo,4,null,null,global.iAlert);
							du.rCursor();
							global.desbloquear();
						}
						else{
							initConexion();
							//Servicio de registro del estado de cuenta
							du.ejecutaWsMethod(wsMS,function(evt:ResultEvent):void {											
								var res:String = evt.result.toString();
										
								du.rCursor();
								du.closeWs(wsMS);
								
								if(res.substr(0,1) == "1"){
									btnCargar.visible = false;
									btnBuscar.enabled = false;
									btnExportar.visible = true;
									btnLimpiar.visible = true;	
									
									var dgc:DataGridColumn = new DataGridColumn();
									dgc.headerText = "ESTATUS";
									dgc.dataField = "COMENTARIO";
                					var cols:Array = dgInfo.columns;
                					
                					var dgnew:DataGrid = new DataGrid();
                					var colsnew:Array = dgnew.columns;
                					colsnew.push(dgc);
                					
                					var dgcnew:DataGridColumn = new DataGridColumn();
                					
                					for(var i:int = 0; i < cols.length; i ++){
                						dgcnew = new DataGridColumn();
                						dgcnew.headerText = cols[i].headerText;
                						dgcnew.dataField = cols[i].dataField;
                						
                						colsnew.push(dgcnew);
                					}
                					
                					dgInfo.columns = colsnew;
									
									initConexionRep();
									du.sCursor();
									
									du.ejecutaWsMethod(wsRep,function(event:ResultEvent):void{		
										_xmlInfo = new XML(event.result);
						
										du.closeWs(wsRep);
										du.rCursor();
										global.desbloquear();
						
										if(_xmlInfo.elements().length() > 0){
											dgInfo.dataProvider = null;
											dgInfo.dataProvider = _xmlInfo.Table;
											var cont:int = _xmlInfo.elements().length();
											lblResultado.text = cont + " Registro(s) Procesado(s)";
											Alert.show("Proceso finalizado exitosamente.",titulo,4,null,null,global.iInfo);	
										}
									});
									wsRep.getRepCargaEdoCuenta.send(banco, cuenta, fecEdo, global.obtenerUsuario());
								}
								else{
									Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);
									global.desbloquear();
								}				
							});
							wsMS.setCargaEdoCuenta.send(banco, cuenta, fecEdo, fecOpe, fecha, referencia, desc, codTrans, sucursal, 
														depositos, retiros, saldo, movto, descDet, ref2, importe, tipo,
														global.obtenerUsuario());	
						}
					});
					params[0] = fecEdo; 
					params[1] = banco;
					params[2] = cuenta;
					wsCat.getListado.send(65, params);
	        	}
        	}
        }
        
		private function exportar():void{
			var dgInfo:DataGrid = obtenerGrid();
			var dgE:ExcelExportXls = new ExcelExportXls();
			dgE.loadDGInExcel(dgInfo,null,titulo);		
		}
		
		private function formateaBanco():void{
			var cont:int = _xmlBan.elements().length();
			var oItem:Object;
			var item:Array = new Array();
				
			oItem = new Object();
			oItem.id = "0";
			oItem.nombre = "--Seleccionar--";
			oItem.estado = "";
			item.push(oItem);
			
			for (var i:int = 0; i < cont; i++){
				oItem = new Object();
				oItem.id = _xmlBan.Table[i].CODIGO;
				oItem.nombre = _xmlBan.Table[i].NOMBRE;	
				oItem.estado = _xmlBan.Table[i].NOMBRE;				
				item.push(oItem);
			}
			banObj = new ArrayCollection(item);
		}
		
		private function formateaCuenta():void{
			var cont:int = _xmlCta.elements().length();
			var oItem:Object;
			var item:Array = new Array();
				
			oItem = new Object();
			oItem.id = "0";
			oItem.numero = "--Seleccionar--";
			item.push(oItem);
			
			for (var i:int = 0; i < cont; i++){
				oItem = new Object();
				oItem.id = _xmlCta.Table[i].CODIGO;
				oItem.numero = _xmlCta.Table[i].CODIGO + " - " + _xmlCta.Table[i].NUMERO;					
				item.push(oItem);
			}
			ctaObj = new ArrayCollection(item);
		}
        
        private function formateaInfo():Boolean{
        	var dgInfo:DataGrid = obtenerGrid();
        	var info:ArrayCollection = dgInfo.dataProvider as ArrayCollection;
			fecOpe = new Array;
      		fecha = new Array;
      		referencia= new Array;
      		desc = new Array;
      		codTrans = new Array;
      		sucursal = new Array;
      		depositos = new Array;
      		retiros = new Array;
	      	saldo = new Array;
	      	movto = new Array;
	      	descDet = new Array;
	      	ref2 = new Array;
	      	importe = new Array;
	      	tipo = new Array;
			
			for (var i:int = 0; i < info.length; i++){
				fecOpe[i] = info[i].FECOPE != null ? info[i].FECOPE : "";
	      		fecha[i] = info[i].FECHA != null ? info[i].FECHA : "";
	      		referencia[i] = info[i].REFERENCIA != null ? info[i].REFERENCIA : "";
	      		desc[i] = info[i].DESCRIPCION != null ? info[i].DESCRIPCION : "";
	      		codTrans[i] = info[i].CODTRANS != null ? info[i].CODTRANS : "";
	      		sucursal[i] = info[i].SUCURSAL != null ? info[i].SUCURSAL : "";
	      		depositos[i] = info[i].DEPOSITOS != null ? info[i].DEPOSITOS : 0;
	      		retiros[i] = info[i].RETIROS != null ? info[i].RETIROS : 0;
		      	saldo[i] = info[i].SALDO != null ? info[i].SALDO : 0;
		      	movto[i] = info[i].MOVIMIENTO != null ? info[i].MOVIMIENTO : "";
		      	descDet[i] = info[i].DESCDET != null ? info[i].DESCDET : "";
		      	ref2[i] = info[i].REF2 != null ? info[i].REF2: "";
		      	importe[i] = info[i].IMPORTE != null ? info[i].IMPORTE: 0;
		      	tipo[i] = info[i].TIPO != null ? info[i].TIPO : "";
			}
			return true;
        }
        
        private function fileReference_Select(event:Event):void{
	    	fileReference.addEventListener(ProgressEvent.PROGRESS,fileReference_Progress);
	        fileReference.addEventListener(Event.COMPLETE,fileReference_Complete);
	        fileReference.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);
	        fileReference.load(); 
	        txtArchivo.text = fileReference.name;
        }
        
        private function fileReference_Cancel(event:Event):void{
            fileReference = null;
        }
        
        private function fileReference_Progress(event:ProgressEvent):void{
            //progressBar.visible = true;
            //progressBar.includeInLayout = true;
        }
        
        private function onLoadError():void{
        }
        
        private function fileReference_Complete(event:Event):void{
            try{
            	var dgInfo:DataGrid = obtenerGrid();
	            dgInfo.dataProvider = null;
	            infoObj.removeAll();
	            infoObj.refresh();
	            btnCargar.enabled = true;
	            btnBuscar.enabled = true;
	            
	            var fileData:ByteArray = fileReference.data;
	            var excelFile:ExcelFile = new ExcelFile();
	            var cont:int;
	            var filas:int;
	            var columnas:int;
	            var band:Boolean = false;
	            
	            if(fileData != null && fileData.length > 0){
	            	excelFile.loadFromByteArray(fileData);
	                var sheet:Sheet = excelFile.sheets[0];
	                if(sheet != null){
	                	cont = 0;
	            	    filas = sheet.rows;
	                    columnas = sheet.cols;
	                    for(var i:int = 1; i < filas; i++){
	                	    var cellObject:Object = {};
	                        for(var col:int = 0; col < columnas; col++){
	                    	    var cell:Cell = new Cell();
	                            var cellValue:String = new String();
	                            cell = sheet.getCell(i, col);
	                            if(cell != null){
	                            	cellValue =(cell.value).toString();
	                            	if(col == 0 && cellValue == ""){
	                            		band = true;
	                            		break;
	                            	}
	                                else
	                                	addProperty(cellObject, col, cellValue);
	                            }
	                     	}  
	                        if(!band){
	                        	infoObj.addItem(cellObject);
	                        	cont += 1;
	                        } 
	                        else 
	                        	band = false;
	                        dgInfo.dataProvider = infoObj;
	                    } 
	                    lblResultado.text = cont + " Registro(s) Encontrado(s)";
	                }    
	            } 
	            dgInfo.includeInLayout = true;
	            dgInfo.visible = true;
	            fileReference = null;
	            btnCargar.enabled = true;
            }
            catch (error:Error){
         		 Alert.show(error.message,titulo,4,null,null,global.iAlert);
         		 return;
         	} 
        }  
        
        private function addProperty(cellObject:Object,index:int,cellValue:String):void{
            if(currentState == "banorte"){
	            if(index == 0)
	                cellObject.FECOPE = global.formatearFechaExcel(Number(cellValue));
	            else if(index == 1)
	                cellObject.FECHA = global.formatearFechaExcel(Number(cellValue));
	            else if(index == 2)
	                cellObject.REFERENCIA = cellValue;
	            else if(index == 3)
	            	cellObject.DESCRIPCION = cellValue;
	            else if(index == 4)
	                cellObject.CODTRANS = cellValue;
	            else if(index == 5)
	                cellObject.SUCURSAL = cellValue;
	            else if(index == 6)
	                cellObject.DEPOSITOS = cellValue;
	            else if(index == 7)
	                cellObject.RETIROS = cellValue;
				else if(index == 8)
	                cellObject.SALDO = cellValue;
	            else if(index == 9)   
	            	cellObject.MOVIMIENTO = cellValue;
	            else if(index == 10)
	            	cellObject.DESCDET = cellValue;
            }
            else if(currentState == "banamex"){
            	if(index == 0)
	                cellObject.FECHA = global.formatearFechaExcel(Number(cellValue));
	            else if(index == 1)
	            	cellObject.DESCRIPCION = cellValue;
	            else if(index == 2)
	                cellObject.DEPOSITOS = cellValue;
	            else if(index == 3)
	                cellObject.RETIROS = cellValue;
				else if(index == 4)
	                cellObject.SALDO = cellValue;
            }
            else if(currentState == "bancomer"){
            	if(index == 0)
	                cellObject.FECHA = global.formatearFechaExcel(Number(cellValue));
	            else if(index == 1)
	                cellObject.DESCRIPCION = cellValue;
	            else if(index == 2)
	                cellObject.RETIROS = cellValue;
	            else if(index == 3)
	            	cellObject.DEPOSITOS = cellValue
	            else if(index == 4)
	                cellObject.SALDO = cellValue;
            }
            else if(currentState == "scotiabank"){
            	if(index == 0)
	                cellObject.NUMERO = cellValue;
	            else if(index == 1)
	                cellObject.FECHA = global.formatearFechaExcel(Number(cellValue));
	            else if(index == 2)
	                cellObject.REFERENCIA = cellValue;
	            else if(index == 3)
	            	cellObject.IMPORTE = cellValue;
	            else if(index == 4)
	                cellObject.TIPO = cellValue;
	            else if(index == 5)
	                cellObject.DESCRIPCION = cellValue;
	            else if(index == 6)
	                cellObject.SALDO = cellValue;    
	            else if(index == 7)
	                cellObject.DESCDET = cellValue;
	            else if(index == 8)
	                cellObject.REF2 = cellValue;
            }
        }
      
      	private function initApp():void{
      		var wsCat:WebService = new WebService;
      		var params:Array = new Array; 
	    	global = new Globales();
	    	du = new Utils();
	        titulo = "Carga de Estados de Cuenta";
	      	lblTitulo.text = titulo.toUpperCase();  
	      	
	      	du.initWsCat(wsCat);
			du.sCursor();
					
			du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
				_xmlBan = new XML(evt.result.toString());
						
				if(_xmlBan.elements().length() > 0){
					formateaBanco();
					cboBanco.dataProvider = banObj;
				}	
					
				du.rCursor();
				du.closeWs(wsCat);					
			});
			//MÃ©todo que obtiene el listado de bancos registrados con cuenta(s) de desembolso activa
			params[0] = "P"; 
			wsCat.getCatalogoGral.send(42, params);	
	    }    
	    
	    private function initConexion():void{				
			wsMS = new WebService();			
			wsMS.wsdl = Application.application.wsStr.wsdlServ.toString();
			wsMS.loadWSDL();
		}	
		
		private function initConexionRep():void{				
			wsRep = new WebService();			
			wsRep.wsdl = Application.application.wsStr.wsdlRep.toString();
			wsRep.loadWSDL();
		}	
		
		private function limpiar():void{
			if(currentState != null){
				var dgInfo:DataGrid = obtenerGrid();
				var cols:Array = dgInfo.columns;
				dgInfo.columns = cols;
					
            	//cols.pop();
            	//dgInfo.columns = cols; 
				dgInfo.dataProvider = null;
				lblResultado.text = "";
				txtArchivo.text = "";
				btnCargar.visible = true;
				btnCargar.enabled = false;
				btnBuscar.enabled = true;
				btnExportar.visible = false;
	            btnLimpiar.visible = false;
			}
		}
		
		private function limpiarForm():void{
			var dgInfo:DataGrid = obtenerGrid();
			var cols:Array = dgInfo.columns;
			var colsnew:Array = new Array();
			
			var i:int = 0;
			var dgcnew:DataGridColumn = new DataGridColumn();
			for(i = 1; i < cols.length; i ++)
			{
				dgcnew = new DataGridColumn();
				dgcnew.headerText = cols[i].headerText;
				dgcnew.dataField = cols[i].dataField;
				
				colsnew.push(dgcnew);
			}
							
			dgInfo.columns = colsnew;
			cboBanco.selectedIndex = 0;
			cboBanco.dispatchEvent(new ListEvent(ListEvent.CHANGE, true, false));
		}
		
		private function modificarEstado():void{
			var estado:String = cboBanco.selectedItem.estado;
			currentState = estado.toLowerCase();
		}
		
		private function obtenerGrid():DataGrid{
			if(currentState == "banorte")
				return dgBanorte;
			else if(currentState == "banamex")
				return dgBanamex;
			else if(currentState == "bancomer")
				return dgBancomer;
			else if(currentState == "scotiabank")
				return dgScotia;
			return null;
		}
		
		private function seleccionarBanco():void{
			limpiar();
			currentState = null;
			dtfFecha.selectedDate = null;
			buscarCuenta();
		}
		
		private function valida():Boolean{
			
			if(cboBanco.selectedIndex == 0){
				Alert.show("Debe seleccionar el Banco.",titulo,4,null,null,global.iAlert);
				return false;
			}
			if(cboCuenta.selectedIndex == 0){
				Alert.show("Debe seleccionar la Cuenta Bancaria.",titulo,4,null,null,global.iAlert);
				return false;
			}
			if(dtfFecha.text == ""){
				Alert.show("Debe seleccionar la fecha del Estado de Cuenta.",titulo,4,null,null,global.iAlert);
				return false;
			}
			
			return true;
		}
    ]]>
  	</mx:Script>
  	<mx:Canvas id="cnvCarga" backgroundColor="#FFFFFF" backgroundAlpha="1.0" width="440" height="160">
  	  	<mx:Canvas x="10" y="39" width="420" height="110" styleName="canvasMod">
	  	  	<mx:Label id="lblFecha" x="61.3" y="76" text="Fecha:"/>
	  	  	<mx:DateField id="dtfFecha" x="107.3" y="74" width="100"/>
	  	  	<mx:Label id="lblBanco" x="60.3" y="13" text="Banco:"/>
	  	  	<mx:ComboBox id="cboBanco" x="107.3" y="10" width="251" labelField="nombre" change="seleccionarBanco()"/>
	  	  	<mx:Label id="lblEtiqCuenta" x="57.3" y="45" text="Cuenta:" textAlign="right"/>
	  	  	<mx:ComboBox id="cboCuenta" x="107.3" y="42" width="251" labelField="numero" change="modificarEstado()"/>
	  	</mx:Canvas>
	  	<mx:Label id="lblTitulo" x="10" y="10" width="410" fontSize="12" fontWeight="bold" fontStyle="italic"/>
  	</mx:Canvas>
</mx:Canvas>