<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" width="420" height="420" creationPolicy="all">
	<mx:Metadata>
		[Event(name="enviarDatosAcred", type="Data.EventAcred")]
	</mx:Metadata>
	
	<mx:Validator id="nombreV" source="{txtNombre}" property="text" 
	invalid="{txtNombre.setFocus()}" triggerEvent="" requiredFieldError="Nombre de Acreditado Requerido"/>
	 
	<mx:Validator id="aPaternoV" source="{txtAP}" property="text" 
	invalid="{txtAP.setFocus()}" triggerEvent="" requiredFieldError="Apellido Paterno Requerido"/> 
	 
	<mx:Validator id="fechaV" source="{txtFecha}" property="text" 
	invalid="{txtFecha.setFocus()}" triggerEvent="" requiredFieldError="Fecha de Nacimiento Requerida"/>
	
	<mx:Validator id="rfcV" source="{txtRfc}" property="text" 
	invalid="{txtRfc.setFocus()}" triggerEvent="" requiredFieldError="RFC Requerido"/>
	
	<mx:Validator id="curpV" source="{txtCurp}" property="text" 
	invalid="{txtCurp.setFocus()}" triggerEvent="" requiredFieldError="CURP Requerida"/>
	
	<mx:Validator id="ifeV" source="{txtIfe}" property="text" 
	invalid="{txtIfe.setFocus()}" triggerEvent="" requiredFieldError="IFE Requerido"/>

	<mx:Script>
		<![CDATA[
			import mx.messaging.AbstractConsumer;
			import Data.DatosAcred;
			import Data.EventAcred;
			import Data.Globales;
			import Data.Utils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.containers.TitleWindow;			
			import mx.effects.easing.Elastic;
			import mx.managers.PopUpManager;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.ArrayUtil;
			import mx.utils.StringUtil;
			import mx.validators.Validator;

			[Bindable]
			private var _xmlCoord:XML =  new XML();
			[Bindable]
			private var _xmlDatos:XML =  new XML();
			[Bindable]
			private var _xmlEntFed:XML =  new XML();
			[Bindable]
			private var _xmlPais:XML =  new XML();
			
			public var coordArr:Array = new Array();
			
			public var coordObj:ArrayCollection = new ArrayCollection();
			public var paisObj:ArrayCollection = new ArrayCollection();
			public var entFedObj:ArrayCollection = new ArrayCollection();
			public var datos:DatosAcred = new DatosAcred();
			
			public var wsMS:WebService;   //variable utilizada para las llamadas asincronas de WS	
			public var du:Utils;
			private var global:Globales;
			public var bandCURP:Boolean;
			public var f:Date;
			public var fecMin:Date;
			public var fecMax:Date;
			
			public function initConexion():void{				
				wsMS = new WebService();			
				wsMS.wsdl = Application.application.wsStr.wsdlServ.toString();
				wsMS.loadWSDL();
			}	
			
			public function enviarDatosAcred(formData:DatosAcred):void{
				var invalidArray:Array = Validator.validateAll([nombreV, aPaternoV, fechaV, rfcV, curpV, ifeV]);
				var i:int;
				if(invalidArray.length == 0){	
					formData.codigo = txtCodigo.text;
					formData.nombre = StringUtil.trim(txtNombre.text.toUpperCase());
					formData.segNombre = StringUtil.trim(txtSegNombre.text.toUpperCase());
					formData.aPaterno = StringUtil.trim(txtAP.text.toUpperCase());
					formData.aMaterno = StringUtil.trim(txtAM.text.toUpperCase());
					formData.fecha = txtFecha.text;
					
					if (rdbMasculino.selected == true)
						formData.sexo = "M";
					if (rdbFemenino.selected == true)
						formData.sexo = "F";
					
					//seleciona el codigo de la sucursal
					if (cboCoord.text != "--Seleccionar--")
						formData.cdgco = cboCoord.selectedItem.id;	
						
					//selecciona el codigo del pais	
					if (cboPais.text != "--Seleccionar--")
						formData.cdgPais = cboPais.selectedItem.CODIGO;
					//selecciona el codigo de la entidad de nacimiento		
					if (cboEntidad.text != "--Seleccionar--")
						formData.cdgEntFed = cboEntidad.selectedItem.id;
					//selecciona el codigo de la nacionalidad
					if (cboNac.text != "--Seleccionar--")
					 	formData.cdgNac = cboNac.selectedItem.CODIGO;
					 						
					formData.rfc = txtRfc.text;
					formData.curp = txtCurp.text;
					formData.ife = StringUtil.trim(txtIfe.text); 
					
					formData.guardaDatos = true;
				}
				else
					formData.guardaDatos = false;
				var event:EventAcred = new EventAcred("enviarDatosAcred", formData);
				dispatchEvent(event);
			}
			
			public function formateaCoord():void{
				var i:int;
				var cont:int = _xmlCoord.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (i = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlCoord.Table[i].CODIGO;	
					oItem.nombre = _xmlCoord.Table[i].NOMBRE;
					item.push(oItem);
					coordArr[i + 1] = _xmlCoord.Table[i].NOMBRE.toString();
				}
				coordObj = new ArrayCollection(item);
			}
			
			public function formateaEntFed():void{
				var i:int;
				var cont:int = _xmlEntFed.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.clave = "0";
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (i = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlEntFed.Table[i].CODIGO;
					oItem.clave = _xmlEntFed.Table[i].CDGCURP;	
					oItem.nombre = _xmlEntFed.Table[i].NOMBRE;
					item.push(oItem);
				}
				entFedObj = new ArrayCollection(item);
			}
			
			public function formateaPais(cadInfo:String):void{
				var oItem:Object;
				var array:Array;
				
				oItem = new Object();
				oItem.CODIGO = "0";	
				oItem.NOMBRE = "--Seleccionar--";
				oItem.GENTILICIO = "--Seleccionar--";
				
				var xml:XMLDocument = new XMLDocument(cadInfo); 
     			var decoder:SimpleXMLDecoder = new SimpleXMLDecoder();  
     			var data:Object = decoder.decodeXML(xml);  
				array = ArrayUtil.toArray(data.NewDataSet.Table);   
				paisObj = new ArrayCollection(array);
				paisObj.addItemAt(oItem, 0);
			}
			
			public function generaCURP():void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				//Elimina espacios al principio y final de los textos 
				txtAP.text = StringUtil.trim(txtAP.text);
				txtAM.text = StringUtil.trim(txtAM.text);
				txtNombre.text = StringUtil.trim(txtNombre.text);
				txtSegNombre.text = StringUtil.trim(txtSegNombre.text);
				
				if (txtAP.text != "" && txtNombre.text != "" && txtFecha.text != "" 
				&& (rdbMasculino.selected == true || rdbFemenino.selected == true) && cboEntidad.selectedIndex > 0){
					var curp:String;
					var nombres:String;
					var sexo:String;
					var clave:String;
					var j:int;
										
					du.initWsCat(wsCat);
					du.sCursor();
					
					nombres = txtNombre.text + " " + txtSegNombre.text;
					
					if(rdbMasculino.selected == true) 
						sexo = "H";
					else if(rdbFemenino.selected == true)
						sexo = "M";
					
					for(j = 0; j < entFedObj.length; j++){
						if (entFedObj[j].nombre.toString() == cboEntidad.text){
							clave = entFedObj[j].clave.toString();	
							break;		
						}			
					}
						
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						curp = evt.result.toString();
	
						du.rCursor();
						du.closeWs(wsCat);
						
						txtRfc.text = curp.substr(0,10);
						txtCurp.text = curp;	
					});
					//GENERA EL CURP DEL CLIENTE
					params[0] = txtAP.text;
					params[1] = txtAM.text;
					params[2] = nombres;
					params[3] = txtFecha.text;
					params[4] = sexo;
					params[5] = clave;
					wsCat.getInfoAcred.send(2, params);
				}
				else{
					txtRfc.text = "";
					txtCurp.text = "";
				}	
			}
			
			public function init(info:DatosAcred):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				global = new Globales();
				du = new Utils();
				f = Application.application._Current_Fecha;
				fecMin = new Date(f.getFullYear()-18,f.getMonth(),f.getDate());
				fecMax = new Date(f.getFullYear()-75,f.getMonth(),f.getDate());
				txtFecha.selectableRange = {rangeStart: fecMax, rangeEnd: fecMin};
				
				permisos();
				
				_xmlCoord = Application.application._xmlCoord;
				
				if (_xmlCoord.elements().length() > 0){
					formateaCoord();
					cboCoord.dataProvider = coordObj;
				} 	
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlPais = new XML(evt.result.toString());
					
					if (_xmlPais.elements().length() > 0){
						//formateaPais();
						formateaPais(evt.result.toString());
						cboPais.dataProvider = paisObj;
						cboNac.dataProvider = paisObj;
					}
					
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						_xmlEntFed = new XML(evt.result.toString());
						
						du.rCursor();
						du.closeWs(wsCat);
						
						if (_xmlEntFed.elements().length() > 0){
							formateaEntFed();
							cboEntidad.dataProvider = entFedObj;
						}
					
						if (info != null){
							var j:int;
							txtCodigo.text = info.codigo;
							txtNombre.text = info.nombre;
							txtSegNombre.text = info.segNombre;
							txtAP.text = info.aPaterno;
							txtAM.text = info.aMaterno;
							if (info.sexo.toUpperCase() == "F")
								rdbFemenino.selected = true;
							else if (info.sexo.toUpperCase() == "M")
								rdbMasculino.selected = true;
							txtFecha.text = info.fecha;
							
							//selecciona la sucursal del acreditado
							for(j = 0; j < coordObj.length; j++){   
								if (coordObj[j].id.toString() == info.cdgco){
									cboCoord.selectedIndex = j;
									break;
								}
							}
							//selecciona el pais del acreditado
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].CODIGO.toString() == info.cdgPais){
									cboPais.selectedIndex = j;
									break;
								}
							}
							//selecciona la entidad federativa del acreditado
							for(j = 0; j < entFedObj.length; j++){   
								if (entFedObj[j].id.toString() == info.cdgEntFed){
									cboEntidad.selectedIndex = j;
									break;
								}
							} 
							//selecciona la nacionalidad del acreditado
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].CODIGO.toString() == info.cdgNac){
									cboNac.selectedIndex = j;
									break;
								}
							}
							txtRfc.text = info.rfc;
							txtCurp.text = info.curp;
							txtIfe.text = info.ife;
						}		
						else{
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].NOMBRE.toString().toUpperCase() == "MEXICO"){
									cboPais.selectedIndex = j;
									j = paisObj.length;
								}
							}
							for(j = 0; j < paisObj.length; j++){   
								if (paisObj[j].GENTILICIO.toString().toUpperCase() == "MEXICANO"){
									cboNac.selectedIndex = j;
									j = paisObj.length;
								}
									
							}
					
							du.initWsCat(wsCat);
							du.sCursor();
					
							du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
								var codigo:String = evt.result.toString();
								
								txtCodigo.text = codigo;
							
								du.rCursor();
								du.closeWs(wsCat);
							
							});
							//EXTRAE EL CODIGO CONSECUTIVO DE ACREDITADOS
							wsCat.getInfoAcred.send(11);
						}
					});
					//MUESTRA LAS ENTIDADES FEDERATIVAS DISPONIBLES
					wsCat.getCatalogoGral.send(2);
				});
				//CONSULTA LOS PAISES DISPONIBLES
				wsCat.getCatalogoGral.send(1);
			}
			
			public function limpiaCampos():void{
			}
			
			public function llenaDireccion():void{
			}
			
			public function permisos():void{
				if(global.permisosModAcred(Application.application.PERFIL_ID)){
					txtRfc.editable = true;
					txtCurp.editable = true;
				}
			}
	]]>
	</mx:Script>
	
	<mx:FormItem label="Código:" id="codigo" visible="true">
		<mx:TextInput id="txtCodigo" maxChars="12" editable="false"/>
	</mx:FormItem>
	<mx:FormItem label="Nombres:" id="nombre" visible="true" width="384">
		<mx:Canvas>
			<mx:TextInput id="txtNombre" width="129" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
			<mx:TextInput id="txtSegNombre" x="127" width="137" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>	
		</mx:Canvas>
	</mx:FormItem>
	<mx:FormItem label="Apellido Paterno:" id="AP" visible="true">
		<mx:TextInput id="txtAP" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Apellido Materno:" id="AM" visible="true">
		<mx:TextInput id="txtAM" restrict="A-Z;a-z;Ñ;ñ; " focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Sexo:" id="sexo" visible="true" width="330">
		<mx:Canvas>
			<mx:RadioButton id="rdbFemenino" label="Femenino" focusOut="generaCURP()"/>
			<mx:RadioButton id="rdbMasculino" label="Masculino" x="80" focusOut="generaCURP()"/>	
		</mx:Canvas>	
	</mx:FormItem>
	<mx:FormItem label="Coordinacion:" id="coord" visible="true" width="330">
		<mx:Canvas>
			<mx:ComboBox id="cboCoord" labelField="nombre" width="170"/>
		</mx:Canvas>	
	</mx:FormItem>
	<mx:FormItem label="Fecha Nacimiento:" id="fecha" visible="true" width="280">
		<mx:DateField id="txtFecha" width="109" yearNavigationEnabled="true" focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="País Nacimiento:" id="pais" visible="true" width="290">
		<mx:ComboBox id="cboPais" labelField="NOMBRE" width="170"/>
	</mx:FormItem>
	<mx:FormItem label="Entidad Nacimiento:" id="entidad" visible="true" width="290">
		<mx:ComboBox id="cboEntidad" labelField="nombre" width="170" focusOut="generaCURP()"/>
	</mx:FormItem>
	<mx:FormItem label="Nacionalidad:" id="nacionalidad" visible="true" width="290">
		<mx:ComboBox id="cboNac" labelField="GENTILICIO" width="170"/>
	</mx:FormItem>
	<mx:FormItem label="RFC:" id="rfc" visible="true">
		<mx:TextInput id="txtRfc" focusIn="generaCURP()" editable="false"/>
	</mx:FormItem>
	<mx:FormItem label="CURP:" id="curp" visible="true">
		<mx:TextInput id="txtCurp" focusIn="generaCURP()" editable="false"/>
	</mx:FormItem>
	<mx:FormItem label="IFE:" id="ife" visible="true">
		<mx:TextInput id="txtIfe" restrict="0-9" maxChars="15"/>
	</mx:FormItem>
</mx:Form>
