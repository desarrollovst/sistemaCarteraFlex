<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="540" height="130" creationPolicy="all">
	<mx:Metadata>
		[Event(name="enviarDatosSolic", type="Data.EventSolic")]
		[Event(name="actualiza", type="actualiza")]
	</mx:Metadata>
	
	<mx:NumberValidator id="tipoProdV" source="{cboTipoProd}" property="selectedIndex"
	 minValue="1" triggerEvent="" lowerThanMinError="Tipo de Producto Requerido"/>
	
	<mx:NumberValidator id="prodCredV" source="{cboProdCred}" property="selectedIndex"
	 minValue="1" triggerEvent="" lowerThanMinError="Producto de Crédito Requerido"/>
	 
	<mx:Script>
		<![CDATA[
			import Data.DatosSolic;
			import Data.EventSolic;
			import Data.Globales;
			import Data.Utils;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;			
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.Application;
			import mx.effects.easing.Elastic;
			import mx.managers.PopUpManager;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.validators.Validator;
			
			private var _xmlTipoProd:XML = new XML();
			private var _xmlProdCred:XML = new XML();

			public var tipoProdObj:ArrayCollection = new ArrayCollection();
			public var prodCredObj:ArrayCollection = new ArrayCollection();
			
			public var datos:DatosSolic = new DatosSolic();
			
			private var wsMS:WebService;		//variable utilizada para las llamadas asincronas de WS	
			private var du:Utils;
			private var codigo:String;
			private var ciclo:String;
			private var clns:String;
			private var numInt:int;
			private var tipoAccion:int;
			private var coord:String;
			private var global:Globales;
			
			private function actualizaProd():void{
				dispatchEvent(new Event("actualiza"));
			}
			
			public function cargaProdCred():void{
				var wsCat:WebService = new WebService();
				var params:Array = new Array();
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlProdCred = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsCat);
					
					cboProdCred.dataProvider = null;
					
					if (_xmlProdCred.elements().length() > 0){
						var j:int = 0;
						formateaProdCred();
						cboProdCred.dataProvider = prodCredObj;
						cboProdCred.selectedIndex = 0;
						if (tipoAccion == 1){
							prodCredObj.filterFunction = filtraProdCred;
							prodCredObj.refresh();
						}
						else if (tipoAccion == 2){
							for each(var item:Object in prodCredObj){
								if (item.id == datos.cdgProdCred){
									cboProdCred.selectedIndex = j;
									break;
								}
								j++;
							}
						}
					}				
				});
				params[0] = this.codigo;
				params[1] = this.ciclo;
				params[2] = this.clns;
				params[3] = this.numInt;
				params[4] = cboTipoProd.selectedItem.id;
				params[5] = this.coord;
				wsCat.getCatalogoGral.send(12, params);
			}
			
			public function enviarDatosSolic(formData:DatosSolic):void{
				var invalidArray:Array = Validator.validateAll([tipoProdV, prodCredV]);
				
				if(invalidArray.length == 0){		
					formData.cdgTipoProd = cboTipoProd.selectedItem.id;
					formData.cdgProdCred = cboProdCred.selectedItem.id;
					formData.guardaProd = true;
				}
				else
					formData.guardaProd = false;
				
				var event:EventSolic = new EventSolic("enviarDatosSolic", formData);
				dispatchEvent(event);
			}
			
			public function filtraProdCred(item:Object):Boolean{
				var isMatch:Boolean = false
				var d:Date = DateField.stringToDate(item.fecVal.toString(),"DD/MM/YYYY")
				if(d >= Application.application._Current_Fecha)
					isMatch = true 
				return isMatch; 
			}
			
			private function formateaTipoProd():void{
				var cont:int = _xmlTipoProd.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.id = _xmlTipoProd.Table[i].CODIGO.toString();	
					oItem.nombre = _xmlTipoProd.Table[i].NOMBRE;
					item.push(oItem);
				}
				tipoProdObj = new ArrayCollection(item);	
			}
			
			private function formateaProdCred():void{
				var cont:int = _xmlProdCred.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				prodCredObj.removeAll();
				prodCredObj.refresh();
				
				oItem = new Object();
				oItem.id = "0";	
				oItem.nombre = "--Seleccionar--";
				oItem.fecVal = DateField.dateToString(Application.application._Current_Fecha,"DD/MM/YYYY");
				item.push(oItem);
				
				for (var i:int = 0; i < cont; i++){		
					oItem = new Object();
					oItem.id = _xmlProdCred.Table[i].CODIGO;	
					oItem.nombre = _xmlProdCred.Table[i].NOMBRE;
					oItem.fecVal = _xmlProdCred.Table[i].FVALIDO;
					item.push(oItem);		
				}
				prodCredObj = new ArrayCollection(item);
			}
			
			public function init(catProd:String, codigo:String, ciclo:String, clns:String, numInt:int, info:DatosSolic, tipoAccion:int, coord:String = ""):void{
				//tipo indica el tipo de Tipo de Producto que puede visualizarse, si el dato esta ausente significa que puede consultar cualquier tipo
				var wsCat:WebService = new WebService();
				var params:Array = new Array();
				global = new Globales();
				du = new Utils();
				this.codigo = codigo;
				this.ciclo = ciclo;
				this.clns = clns;
				this.numInt = numInt;
				this.tipoAccion = tipoAccion;
				this.coord = coord;
				
				if(tipoAccion == 2)
					cnvProdSolic.enabled = false;
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlTipoProd = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsCat);
					
					if (_xmlTipoProd.elements().length() > 0){
						formateaTipoProd();
						cboTipoProd.dataProvider = tipoProdObj;
					}	
								
					if (info != null){
						var j:int = 0;
						
						datos.cdgTipoProd = info.cdgTipoProd;
						datos.cdgProdCred = info.cdgProdCred;
						
						for each(var item:Object in tipoProdObj){
							if (item.id == info.cdgTipoProd){
								cboTipoProd.selectedIndex = j;
								cargaProdCred();
								break;
							}
							j++;
						}
					}	
				});
				params[0] = clns;
				params[1] = Application.application.U_ID;
				params[2] = catProd;
				wsCat.getCatalogoGral.send(11, params);
			}
			
			public function obtieneProdCred():String{
				return cboProdCred.selectedItem.id;
			}
			
			public function obtieneTipoProd():String{
				return cboTipoProd.selectedItem.id;
			}
	]]>
	</mx:Script>
	<mx:Canvas id="cnvProdSolic" x="10" y="10" width="520" height="110" styleName="canvasMod">
		<mx:FormItem label="Tipo de Producto:" id="tipoProd" visible="true" x="59.5" y="19">
			<mx:ComboBox id="cboTipoProd" labelField="nombre" change="cargaProdCred()"/>
		</mx:FormItem>
		<mx:FormItem label="Producto de Crédito:" id="prodCred" visible="true" x="45.5" y="63" width="350">
			<mx:ComboBox id="cboProdCred" width="230" labelField="nombre" change="actualizaProd()"/>
		</mx:FormItem>
	</mx:Canvas>
</mx:Canvas>