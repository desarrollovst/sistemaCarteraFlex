<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:forms="forms.*" xmlns:control="control.*" 
	width="100%" height="100%" creationComplete="init()" creationPolicy="all" 
	xmlns:Forms="OPERAC.Forms.*" xmlns:Control="OPERAC.Control.*" xmlns:GENERAL="GENERAL.*">
	<mx:states>
		<mx:State name="seleccion">
			<mx:SetProperty target="{canvas1}" name="width" value="670"/>
			<mx:SetProperty target="{canvas1}" name="height" value="375"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:DataGrid id="dgReg" x="17.5" y="142" width="640" height="190" doubleClickEnabled="true" 
					itemDoubleClick="buscaControl(2)" itemClick="seleccionaPago()">
					<mx:columns>
						<mx:DataGridColumn headerText="GRUPO" dataField="CDGNS" width="65"/>
						<mx:DataGridColumn headerText="NOMBRE GRUPO" dataField="NOMNS" width="140"/>
						<mx:DataGridColumn headerText="CICLO" dataField="CICLO" width="55"/>
						<mx:DataGridColumn headerText="FECHA REGISTRO" dataField="FECREG" width="115"/>
						<mx:DataGridColumn headerText="FECHA PAGO" dataField="FECPAGO" width="90"/>
						<mx:DataGridColumn headerText="CANTIDAD" dataField="CANTIDAD" width="85"/>
						<mx:DataGridColumn headerText="TIPO" dataField="TIPOREG" width="115"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
			<mx:RemoveChild target="{btnBusqLimpiar}"/>
			<mx:RemoveChild target="{btnBuscar}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Button x="589.5" y="340" label="Limpiar" click="limpiar()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="545.5" y="97" width="112" height="37" cornerRadius="10" borderStyle="solid" borderColor="#7B8B93" visible="true" id="canvas3">
					<mx:Button id="btnAgregar" x="58" y="3" icon="@Embed(source='assets/images/add.png')" click="buscaControl(1)" toolTip="Agregar Registro" width="40"/>
					<mx:Button id="btnEditar" x="13" y="3" icon="@Embed(source='assets/images/edit.png')" click="buscaControl(2)" toolTip="Editar Registro" width="40"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name="control">
			<mx:SetProperty target="{canvas1}" name="width" value="950"/>
			<mx:SetProperty target="{canvas1}" name="height" value="960"/>
			<mx:RemoveChild target="{btnBusqLimpiar}"/>
			<mx:RemoveChild target="{btnBuscar}"/>
			<mx:RemoveChild target="{txtBusqCiclo}"/>
			<mx:RemoveChild target="{lblBusqCiclo}"/>
			<mx:RemoveChild target="{txtBusqGrupo}"/>
			<mx:RemoveChild target="{lblBusqGrupo}"/>
			<mx:RemoveChild target="{lblCriterios}"/>
			<mx:RemoveChild target="{lblTitulo}"/>
			<mx:RemoveChild target="{canvas2}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Button id="btnLimpiar" label="Limpiar" x="872" y="478" click="limpiar()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Button id="btnAceptar" label="Registrar" x="787" y="478" click="enviar()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="215" y="10" width="520" height="78" styleName="canvasMod">
					<mx:Label x="149" y="12" text="Grupo:"/>
					<mx:TextInput id="txtGrupo" x="195" y="10" width="199" editable="false"/>
					<mx:Label id="lblCiclo" x="402" y="12" text="Ciclo:"/>
					<mx:TextInput x="441" y="10" width="45" id="txtCiclo" editable="false"/>
					<mx:TextInput id="txtCodGrupo" x="69" y="10" width="72" editable="false"/>
					<mx:Label id="lblCodigo" x="20" y="12" text="Código:"/>
					<mx:Label id="lblFecha" x="73.5" y="47" text="Fecha:"/>
					<mx:DateField id="dtfFecha" x="119.5" y="45" width="100" yearNavigationEnabled="true"/>
					<mx:ComboBox id="cboTipo" x="329.5" y="44" width="120" labelField="descripcion"/>
					<mx:Label id="lblTipo" x="235.5" y="47" text="Tipo de Registro:"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="10" y="96" width="930" height="209" styleName="canvasMod" id="canvas0">
					<mx:DataGrid id="dgAcred" x="10" y="10" width="908" height="187" horizontalScrollPolicy="off"
					    editable="true" sortableColumns="false">
						<mx:columns>
							<mx:DataGridColumn headerText="NO." editable="false" headerWordWrap="true" dataField="numero" width="30"/>
							<mx:DataGridColumn headerText="PTO." editable="false" headerWordWrap="true" dataField="puesto" width="40"/>
							<mx:DataGridColumn headerText="CODIGO" editable="false" headerWordWrap="true" dataField="codigo" width="60"/>
							<mx:DataGridColumn headerText="ACREDITADO" editable="false" headerWordWrap="true" dataField="nombre" width="205"/>
							<mx:DataGridColumn headerText="PAGO TEORICO" editable="false" headerWordWrap="true" dataField="pagoTeo" width="70"/>	
							<mx:DataGridColumn headerText="PAGO REAL" dataField="pagoReal" headerWordWrap="true" width="70" editable="true">	
								<mx:itemEditor>
									<mx:Component>
										<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.actualizaPagoReal()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
									</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="DIF." editable="false" headerWordWrap="true" dataField="diferencia" width="70"/>
							<mx:DataGridColumn headerText="APORT." editable="true" headerWordWrap="true" dataField="aport" width="70">
								<mx:itemEditor>
									<mx:Component>
										<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaAport()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
									</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="DEV." editable="true" headerWordWrap="true" dataField="devolucion" width="70">
								<mx:itemEditor>
									<mx:Component>
												<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaDev()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
											</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="AHORRO" editable="true" headerWordWrap="true" dataField="ahorro" width="70">
								<mx:itemEditor>
									<mx:Component>
												<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaAhorro()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
											</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="MULTA" editable="true" headerWordWrap="true" dataField="multa" width="60">
								<mx:itemEditor>
									<mx:Component>
												<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaMulta()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
											</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="ASISTENCIA" editable="true" headerWordWrap="true" dataField="asistencia" editorDataField="selectedItem" width="90">
								<mx:itemEditor>
									<mx:Component>
												<mx:ComboBox initialize="outerDocument.iniciaAsistencia(event)" width="90" fontSize="10" verticalCenter="0"/> 
											</mx:Component>
								</mx:itemEditor>
							</mx:DataGridColumn>
						</mx:columns>
					</mx:DataGrid>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="10" y="328" width="340" height="165" styleName="canvasMod">
					<mx:Label id="lblAhorro" x="194" y="72" text="Ahorro:"/>
					<mx:TextInput id="txtAhorro" x="244" y="70" width="72" editable="false"/>
					<mx:Label id="lblAport" x="20" y="72" text="Aportación:"/>
					<mx:TextInput id="txtAport" x="89" y="70" width="72" editable="false"/>
					<mx:Label id="lblDev" x="20" y="102" text="Devolución:"/>
					<mx:TextInput id="txtDev" x="89" y="100" width="72" editable="false"/>
					<mx:Label id="lblPagoTeo" x="10" y="12" text="Pago Teórico:"/>
					<mx:TextInput id="txtPagoTeo" x="89" y="10" width="72" editable="false"/>
					<mx:Label id="lblPagoReal" x="25" y="42" text="Pago Real:"/>
					<mx:TextInput id="txtPagoReal" x="89" y="40" width="72" editable="false"/>
					<mx:Label id="lblMora" x="49" y="132" text="Mora:"/>
					<mx:TextInput id="txtMora" x="89" y="130" width="72" editable="false"/>
					<mx:Label id="lblMulta" x="203" y="102" text="Multa:"/>
					<mx:TextInput id="txtMulta" x="244" y="100" width="72" editable="false"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Canvas x="358" y="328" width="582" height="142" styleName="canvasMod">
					<mx:TextArea id="txtObs" height="120" width="560" maxChars="256" restrict="A-Z;a-z;ñ;Ñ;0-9; ;" x="10" y="10"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Label x="10" y="308" text="Resumen" width="124.25"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:Label x="358" y="308" text="Observación" width="124.25"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<GENERAL:EstadoCuentaFijo id="comEdoCuentaFijo" x="10" y="500">
				</GENERAL:EstadoCuentaFijo>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition toState="control">		
			<mx:Sequence>
				<mx:WipeRight duration="1000" target="{canvas1}"/>
			</mx:Sequence>			
		</mx:Transition>
		<mx:Transition toState="seleccion">		
			<mx:Sequence>
				<mx:Resize duration="1000" target="{canvas1}"/>
			</mx:Sequence>			
		</mx:Transition>
		<mx:Transition toState="">		
			<mx:Sequence>
				<mx:Fade duration="500" target="{canvas1}"/>
			</mx:Sequence>			
		</mx:Transition>
	</mx:transitions>
	
	<mx:Script>
		<![CDATA[
			import mx.charts.chartClasses.NumericAxis;
			import mx.events.MoveEvent;
			import mx.events.FlexEvent;
			import mx.events.CollectionEvent;
			import mx.events.ValidationResultEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.IndexChangedEvent;
			import mx.collections.ArrayCollection;
			import Data.Globales;
			import Data.Utils;
			import mx.core.Application;			
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.effects.*;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable]
			private var _xmlControl:XML =  new XML();
			[Bindable]
			private var _xmlAcred:XML =  new XML();
			[Bindable]
			private var _xmlPrn:XML =  new XML();
			[Bindable]
			private var _xmlReg:XML =  new XML();
			[Bindable]	
			public var activaSituacion:Boolean = true; //variable que controla el estatus de los Checks de situacion
			
			//arreglos para almacenar la informacion individual de los acreditados
			public var acred:Array;
			public var pagoTeo:Array; 
			public var pagoReal:Array;
			public var aport:Array;
			public var devolucion:Array;
			public var ahorro:Array;
			public var multa:Array;
			public var asist:Array;
	
			public var acredObj:ArrayCollection = new ArrayCollection();
			public var asistObj:ArrayCollection = new ArrayCollection();
			public var tipoObj:ArrayCollection = new ArrayCollection();
			
			public var asistencia:Array = new Array();
			
			private var vResult:ValidationResultEvent;
			
			public var openEffect:Effect = new Fade();
			public var wsMS:WebService;
			public var bandMod:Boolean;	
			public var tipoAccion:int;
			public var indAcred:int;
			public var semana:int;
			public var activo:String;
			public var coord:String;
			public var fecha:String;
			public var grupo:String;
			public var ciclo:String;
			public var sec:String;
			public var titulo:String;
			private var du:Utils;
			private var global:Globales;
			
			public function activarContPagos(band:Boolean):void{
				btnEditar.enabled = band;
			}
			
			public function actualizaPagoReal():void{
				calculaPagoReal();
				calculaDif();	
			}
			
			public function buscaControl(tipo:int):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				tipoAccion = tipo;			
				
				if(tipoAccion == 1){
					fecha = "";
					sec = "";
				}
				else if(tipoAccion == 2){
					if(dgReg.selectedIndex >= 0){
						fecha = dgReg.selectedItem.FECPAGO;
						sec = dgReg.selectedItem.SECUENCIA;
					}
					else{
						Alert.show("Debe seleccionar el registro de Control de Pagos.",titulo,4,null,null,global.iAlert);
						return;
					}
				}
				du.initWsCat(wsCat);
				du.sCursor();
						
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlControl = new XML(evt.result);			
	
					du.rCursor();
					du.closeWs(wsCat);
					
					if(_xmlControl.elements().length() > 0){
						currentState = "control";
						llenaRegistros();
						
						du.initWsCat(wsCat);
						du.sCursor();
							
						du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
							_xmlAcred = new XML(evt.result);			
								
							du.rCursor();
							du.closeWs(wsCat);
							
							if(_xmlAcred.elements().length() > 0){
							 	formateaAcred();
								dgAcred.dataProvider = acredObj;
								calculaPagoTeorico();	
								calculaDif();
								calculaMora();	
								comEdoCuentaFijo.init();
								comEdoCuentaFijo.cargaEdoCuenta(grupo, ciclo);	
								if(activo == "N")
									Alert.show("No es posible modificar el registro, debido a que la vigencia de dicha acción ha concluido.",titulo,4,null,null,global.iAlert);	
							}
							else
								Alert.show("No se encontraron registros de acreditados que coincidan con los criterios de consulta.\n\nVerifique los datos seleccionados.",titulo,4,null,null,global.iAlert);
						});
						params[0] = tipoAccion;
						params[1] = grupo;
						params[2] = ciclo;
						params[3] = fecha;
						params[4] = sec;
						params[5] = global.obtenerUsuario();
						//Obtiene detalle del control de pagos
						wsCat.getInfoRegistro.send(23, params);	
					}
					else 
						Alert.show("No se encontraron registros que coincidan con los criterios de consulta.\n\nVerifique los datos seleccionados.",titulo,4,null,null,global.iAlert);
				});
				params[0] = tipoAccion;
				params[1] = grupo;
				params[2] = ciclo;
				params[3] = fecha;
				params[4] = sec;
				params[5] = global.obtenerUsuario();
				//Obtiene encabezado del control de pagos
				wsCat.getInfoRegistro.send(22, params);
			}
			
			public function buscaListaControl():void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				if(validaBusqueda() == true){
					grupo = txtBusqGrupo.text;
					ciclo = txtBusqCiclo.text;
					
					du.initWsCat(wsCat);
					du.sCursor();
							
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						_xmlReg = new XML(evt.result);			
						
						du.rCursor();
						du.closeWs(wsCat);	
						
						if(_xmlReg.elements().length() > 0){
							txtBusqGrupo.editable = false;
							txtBusqCiclo.editable = false;
							currentState = "seleccion";
							activarContPagos(false);
							dgReg.dataProvider = _xmlReg.Table;
						}
						else{
							du.initWsCat(wsCat);
							du.sCursor(); 
							
							du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
								_xmlPrn = new XML(evt.result);			
						
								du.rCursor();
								du.closeWs(wsCat);	
								
								if(_xmlPrn.elements().length() > 0){	
									if(_xmlPrn.Table[0].SITUACION.toString() == "E"){
										txtBusqGrupo.editable = false;
										txtBusqCiclo.editable = false;
										currentState = "seleccion";
										activarContPagos(false);
									}
									else
										Alert.show("No se encontraron registros que coincidan con los criterios de consulta.\n\nVerifique los datos seleccionados.",titulo,4,null,null,global.iAlert);
								}
								else
									Alert.show("No se encontraron registros que coincidan con los criterios de consulta.\n\nVerifique los datos seleccionados.",titulo,4,null,null,global.iAlert);
							});
							params[0] = grupo;
							params[1] = ciclo;
							wsCat.getInfoGrupo.send(14, params);
						}
					});
					params[0] = grupo;
					params[1] = ciclo;
					params[2] = global.obtenerUsuario();
					//Obtiene el listado de controles de pago de un credito especifico
					wsCat.getListado.send(40, params);
				}
			}
			
			public function calculaAport():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var aport:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					aport += Number(acred[i].aport);
				}
				txtAport.text = aport.toString();	
				calculaMora();
			}
			
			public function calculaDif():void{
				var indAcred:int = dgAcred.selectedIndex;
				var vScroll:Number = dgAcred.verticalScrollPosition;
				
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var pagoTeo:Number;
				var pagoReal:Number;
				var dif:Number = 0;
				
				for (var i:int = 0; i < acred.length; i++){
					pagoTeo = Number(acred[i].pagoTeo);
					pagoReal = Number(acred[i].pagoReal);
					dif = pagoTeo - pagoReal;
					acredObj[i].diferencia = global.formatoDecimalSinSep(dif.toString());
				}
				dgAcred.validateNow();
				dgAcred.selectedItem = indAcred;
				dgAcred.verticalScrollPosition = vScroll;		
			}
			
			public function calculaDev():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var devolucion:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					devolucion += Number(acred[i].devolucion);
				}
				txtDev.text = devolucion.toString();	
			}
			
			public function calculaMora():void{
				var mora:Number = 0;
				mora = Number(txtPagoTeo.text) - Number(txtPagoReal.text) - Number(txtAport.text);
				txtMora.text = global.formatoDecimalSinSep(mora.toString());	
			}
			
			public function calculaPagoReal():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var pagoReal:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					pagoReal += Number(acred[i].pagoReal);
				}
				txtPagoReal.text = pagoReal.toString();
				calculaMora();
			}
						
			public function calculaPagoTeorico():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var pagoTeo:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					pagoTeo += Number(acred[i].pagoTeo);
				}
				txtPagoTeo.text = global.formatoDecimalSinSep(pagoTeo.toString());
			}
			
			public function calculaAhorro():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var ahorro:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					ahorro += Number(acred[i].ahorro);
				}
				txtAhorro.text = ahorro.toString();	
			}
			
			public function calculaMulta():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var multa:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					multa += Number(acred[i].multa);
				}
				txtMulta.text = multa.toString();	
			}
			
			public function cerrar():void{
				PopUpManager.removePopUp(this);
			}
			
			public function desactivaControles():void{
				if(currentState == null)
					dgAcred.editable = false;
				activaSituacion = false; //variable que controla el estatus de los CheckBox de situacion
			}
			
			public function enviar():void{
				//almacena el control de pagos
				if(valida() == true){
					actualizaPagoReal();
					guardaControlPagos();
				}			
			}
			
			//funcion que realiza la carga de datos 
			public function formateaAcred():void{
				var cont:int = _xmlAcred.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				acredObj.removeAll();
				
				for(var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.numero = i + 1;
					oItem.puesto = _xmlAcred.Table[i].PUESTO;
					oItem.codigo = _xmlAcred.Table[i].CDGCL;
					oItem.nombre = _xmlAcred.Table[i].CLIENTE;
					oItem.pagoTeo = _xmlAcred.Table[i].PARCIALIDAD;
					
					if(tipoAccion == 1){
						oItem.pagoReal = 0;
						oItem.diferencia = null;//(-1) * Number(_xmlAcred.Table[i].PARCIALIDAD);
						oItem.aport = 0;
						oItem.devolucion = 0;
						oItem.ahorro = 0;
						oItem.multa = 0;
						oItem.asistencia = null;
					}
					else if(tipoAccion == 2){
						oItem.pagoReal = _xmlAcred.Table[i].PAGOREAL;
						oItem.diferencia = null;
						oItem.aport = _xmlAcred.Table[i].APORT;
						oItem.devolucion = _xmlAcred.Table[i].DEVOLUCION;
						oItem.ahorro = _xmlAcred.Table[i].AHORRO;
						oItem.multa = _xmlAcred.Table[i].MULTA;
						oItem.asistencia = _xmlAcred.Table[i].ASIST;
					}
					item.push(oItem);
				}
				acredObj = new ArrayCollection(item);
			}
			
			//funcion que da formato a la informacion que sera almacenada
			private function formateaRegAcred():Boolean{
				var listaAcred:ArrayCollection;
				
				listaAcred = dgAcred.dataProvider as ArrayCollection;
					
				if (listaAcred != null){
					acred = new Array;
					pagoTeo = new Array;
					pagoReal = new Array;
					aport = new Array;
					devolucion = new Array;
					ahorro = new Array;
					multa = new Array;
					asist = new Array;

					var cont:int = listaAcred.length;
					var contAux:int;
					var j:int; 
						
					for(var i:int = 0; i < cont; i++){
						acred[i] = listaAcred[i].codigo;
						pagoTeo[i] = Number(listaAcred[i].pagoTeo);
						pagoReal[i] = Number(listaAcred[i].pagoReal);
						aport[i] = Number(listaAcred[i].aport);
						devolucion[i] = Number(listaAcred[i].devolucion);
						ahorro[i] = Number(listaAcred[i].ahorro);
						multa[i] = Number(listaAcred[i].multa);
						
						if(cboTipo.selectedItem.id == "S"){
							contAux = asistObj.length;
							for(j = 0; j < contAux; j++){
			   					if (asistObj[j].descripcion.toString() == listaAcred[i].asistencia){
			   						asist[i] = asistObj[j].id.toString();
			   						break;
			   					}
			   				}
		   				}
		   				else
		   					asist[i] = "";
					}
					return true;
				}
				return false;
			}
			
			private function formateaAsistencia():void{
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.descripcion = "Asistencia";
				oItem.id = "A";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Retardo";
				oItem.id = "R";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Falta";
				oItem.id = "F";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Permiso";
				oItem.id = "P";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Mandó Pago";
				oItem.id = "MP";
				item.push(oItem);
				
				asistObj = new ArrayCollection(item);
				
				asistencia[0] = "Asistencia";
				asistencia[1] = "Retardo";
				asistencia[2] = "Falta";
				asistencia[3] = "Permiso";
				asistencia[4] = "Mandó Pago";
			}
			
			private function formateaTipo():void{
				var oItem:Object;
				var item:Array = new Array;
				
				oItem = new Object();
				oItem.descripcion = "--Seleccionar--";
				oItem.id = "0";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Semanal";
				oItem.id = "S";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "Extemporaneo";
				oItem.id = "P";
				item.push(oItem);
				
				tipoObj = new ArrayCollection(item);
			}
			
			public function guardaControlPagos():void{
				if(formateaRegAcred() == true){ //valida que todos los clientes cuenten con su asistencia registrada
					initConexion();
					du.sCursor();
					global.bloquear();
					//Servicio invocado en la etapa de registro del control de pagos
					wsMS.addEventListener(ResultEvent.RESULT, setAccionControlPagos);
					wsMS.setAccionControlPagos.send(tipoAccion, txtCodGrupo.text, txtCiclo.text, 0, Number(txtPagoTeo.text), Number(txtPagoReal.text),
													Number(txtAport.text), Number(txtDev.text), Number(txtAhorro.text), Number(txtMulta.text), Number(txtMora.text), 
													txtObs.text, acred, pagoTeo, pagoReal, aport, devolucion, ahorro, multa, asist, dtfFecha.text, sec, 
													cboTipo.selectedItem.id, fecha, "", global.obtenerUsuario());
				}
			}
			
			public function iniciaAsistencia(event:FlexEvent):void{
				ComboBox(event.currentTarget).dataProvider = asistencia;
			}
			
			public function init():void{
				global = new Globales();
				du = new Utils();
				openEffect.duration = 500;
				openEffect.play([this]);
				titulo = "Control de Pagos";
				lblTitulo.text = titulo.toUpperCase();
				txtBusqGrupo.setFocus();
				formateaAsistencia();
				formateaTipo();
			}
			
			public function initConexion():void{				
				wsMS = new WebService();			
				wsMS.wsdl = Application.application.wsStr.wsdlServ.toString();
				wsMS.loadWSDL();
			}	
			
			public function limpiar():void{
				//modifica el estado actual
				if(currentState == "control"){
					dgAcred.dataProvider = null;
					txtCodGrupo.text = "";
					txtGrupo.text = "";
					txtCiclo.text = "";
					dtfFecha.selectedDate = null;
					cboTipo.selectedIndex = 0;
					txtPagoReal.text = "";
					txtAport.text = "";
					txtDev.text = "";
					txtMora.text = "";
					txtAhorro.text = "";
					txtMulta.text = "";
					txtObs.text = "";
				}
				if(currentState == "seleccion")
					dgReg.dataProvider = null;
				
				currentState = null;
				
				txtBusqGrupo.setFocus();
				txtBusqGrupo.text = "";
				txtBusqGrupo.editable = true;
				txtBusqCiclo.text = "";
				txtBusqCiclo.editable = true;
			}
			
			public function llenaRegistros():void{
				txtCodGrupo.text = _xmlControl.Table[0].CDGNS;
				txtGrupo.text = _xmlControl.Table[0].GRUPO;
				txtCiclo.text = _xmlControl.Table[0].CICLO;
				cboTipo.dataProvider = tipoObj;
				//lblSemana.text = "SEMANA " + _xmlControl.Table[0].SEMANA;
				
				if(tipoAccion == 1){
					//dtfFecha.enabled = true;
					//cboTipo.enabled = true;
					txtPagoReal.text = "0";
					txtAport.text = "0";
					txtDev.text = "0";
					txtMora.text = "0";
					txtAhorro.text = "0";
					txtMulta.text = "0";
					txtObs.text = "";
					activo = "S";
				}
				else if(tipoAccion == 2){	
					//dtfFecha.enabled = false;
					//cboTipo.enabled = false;
					dtfFecha.selectedDate = global.convCadenaFecha(fecha);
					for(var i:int = 0; i < tipoObj.length; i++){
						if(_xmlControl.Table[0].TIPO == tipoObj[i].id.toString()){
							cboTipo.selectedIndex = i;
							break;
						}
					}
					txtPagoReal.text = _xmlControl.Table[0].PAGOREAL;
					txtAport.text = _xmlControl.Table[0].APORT;
					txtDev.text = _xmlControl.Table[0].DEVOLUCION;
					txtMora.text = _xmlControl.Table[0].MORA;
					txtAhorro.text = _xmlControl.Table[0].AHORRO;
					txtMulta.text = _xmlControl.Table[0].MULTA;
					txtObs.text = _xmlControl.Table[0].OBSERVACION; 
					activo = _xmlControl.Table[0].ACTIVO;
				}
			} 
			
			public function seleccionaPago():void{
				activarContPagos(false);
				if (dgReg.selectedIndex >= 0){
					activarContPagos(true);
				}
				else{
					activarContPagos(false);
				}
			}
			
			private function setAccionControlPagos(event:ResultEvent):void{
				wsMS.disconnect();
				du.rCursor();
				global.desbloquear();
				wsMS.removeEventListener(ResultEvent.RESULT, setAccionControlPagos);
				var res:String = event.result.toString();
				if (res.substr(0,1) == "1"){
					Alert.show("Proceso finalizado exitosamente.",titulo,4,null,null,global.iInfo);
					limpiar();
				}	
				else
					Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);		
			}
			
			public function valida():Boolean{
				var cont:int;
				var tipo:String;
				var listaAcred:ArrayCollection;
				
				//valida que el registro se encuentre activo para su modificacion
				if(activo == "N"){
					Alert.show("No es posible modificar el registro, debido a que la vigencia de dicha acción ha concluido.",titulo,4,null,null,global.iAlert);
					return false;
				}
				//valida que la fecha no sea nula 
				if(dtfFecha.selectedDate == null){
					Alert.show("Debe seleccionar la fecha de Registro del Pago.",titulo,4,null,null,global.iAlert);
					return false;
				}
				//valida que se haya seleccionado el tipo de registro
				if(cboTipo.selectedIndex <= 0){
					Alert.show("Debe seleccionar el tipo de registro.",titulo,4,null,null,global.iAlert);
					return false;
				}
				
				tipo = cboTipo.selectedItem.id;
				listaAcred = dgAcred.dataProvider as ArrayCollection;
				cont = listaAcred.length;
				
				/*valida que cada acreditado tenga seleccionado su estatus de asistencia si se trata 
				de un registro de reunion semanal*/   
				for(var i:int = 0; i < cont; i++){
					if(tipo == "S" && (listaAcred[i].asistencia == null || listaAcred[i].asistencia.toString() == "")){
						Alert.show("La asistencia del acreditado " + listaAcred[i].nombre + " no fue registrada.\n\nCapture los datos requeridos.",titulo,4,null,null,global.iAlert);
						return false;
					}
				}
				return true;
			}
			
			public function validaBusqueda():Boolean{
				if(txtBusqGrupo.text == ""){
					Alert.show("Capture el código de grupo.",titulo,4,null,null,global.iAlert);
					return false;
				}
				if(txtBusqCiclo.text == ""){
					Alert.show("Capture el ciclo del préstamo.",titulo,4,null,null,global.iAlert);
					return false;
				}
				return true;
			}
			
			public function validaMonto(event:Event):void{	
				numVal.source = TextInput(event.currentTarget);
				vResult = numVal.validate();

				if (vResult.type!=ValidationResultEvent.VALID)
                	TextInput(event.currentTarget).text = "";
			}
		
		]]>
	</mx:Script>
	
	<mx:NumberValidator id="numVal" property="text" precision="2"
	        allowNegative="true" domain="real" decimalSeparator="." thousandsSeparator="," required="false"/>
	
	<mx:Canvas backgroundAlpha="1.0" backgroundColor="#FFFFFF" width="280" height="180" id="canvas1">
		<mx:Label id="lblTitulo" x="16.5" y="10" width="247" fontSize="12" fontWeight="bold" fontStyle="italic"/>
		<mx:Canvas x="16.5" y="53.5" width="247" height="80.5" styleName="canvasMod" id="canvas2">
			<mx:Label id="lblBusqCiclo" x="9.95" y="44" text="Ciclo:" width="95.3" height="20" textAlign="right"/>
			<mx:Label id="lblBusqGrupo" x="9.95" y="12" text="Grupo:" width="95.3" height="20" textAlign="right"/>
			<mx:TextInput id="txtBusqGrupo" x="113.25" y="10" maxChars="6" restrict="0-9" enter="buscaListaControl()"/>
			<mx:TextInput id="txtBusqCiclo" x="113.25" y="42" width="45" maxChars="2" restrict="0-9" enter="buscaListaControl()"/>
		</mx:Canvas>
		<mx:Label x="16.5" y="34" text="Criterios de Selección" width="124.25" id="lblCriterios"/>
		<mx:Button x="65" y="142" label="Buscar" click="buscaListaControl()" id="btnBuscar"/>
		<mx:Button x="144" y="142" label="Limpiar" width="71" height="24" click="limpiar()" id="btnBusqLimpiar"/>
	</mx:Canvas>
</mx:Canvas>