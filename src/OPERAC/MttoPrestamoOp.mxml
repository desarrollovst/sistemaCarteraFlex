<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:forms="forms.*" xmlns:control="control.*" 
	layout="absolute" width="844" height="600" title="Edición" showCloseButton="true" close="cerrar()" 
	xmlns:Forms="OPERAC.Forms.*" xmlns:Control="OPERAC.Control.*">
	<mx:Script>
		<![CDATA[
			import mx.events.MoveEvent;
			import mx.events.FlexEvent;
			import mx.events.CollectionEvent;
			import mx.events.ValidationResultEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.IndexChangedEvent;
			import mx.collections.ArrayCollection;
			import Data.EventSolic;
			import Data.DatosSolic;
			import Data.Globales;
			import Data.Utils;
			import mx.controls.Alert;
			import mx.controls.RadioButtonGroup;
			import mx.core.Application;
			import mx.effects.*;
			import mx.managers.PopUpManager;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.utils.ObjectUtil;
			import OPERAC.Forms.FormCalendarioSolicSol;
			
			[Bindable]	
			public var activaSituacion:Boolean = true; //variable que controla el estatus de los Checks de situacion
			[Bindable]
			private var info:DatosSolic;
			private var _xmlPrn:XML =  new XML();
			private var _xmlAcred:XML =  new XML();
			private var _xmlCiclo:XML =  new XML();
			private var _xmlControl:XML =  new XML();	
			private var _xmlPres:XML =  new XML();
			
			//arreglos para almacenar la informacion individual de los acreditados
			public var acred:Array;
			public var cantEntreAcred:Array;
			public var situacionAcred:Array;
			
			public var Arr:ArrayCollection = new ArrayCollection();
			public var acredObj:ArrayCollection = new ArrayCollection();
			
			private var vResult:ValidationResultEvent;
			
			private var du:Utils;
			private var global:Globales;
			private var tipoProdRel:String;
			private var estatus:String;
			public var wsMS:WebService;
			public var bandMod:Boolean;	
			public var tipoAccion:int;
			public var indAcred:int;
			public var coord:String;
			public var grupo:String;
			public var ciclo:String;
			public var clns:String;
			public var montoMin:Number;
			public var montoMax:Number;
			public var promotor:String;
			public var titulo:String;
			public var openEffect:Effect = new Fade();
			
			public var formCalendarioSol:FormCalendarioSolicSol = new FormCalendarioSolicSol();
			
			//Funcion que actualiza la situacion de la solicitud
			public function actualizaSituacion(situacion:String):void{
				var cont:int = _xmlAcred.elements().length();
				
				for(var i:int = 0; i < cont; i++){
					Arr[i].situacion = situacion;
				}
			}
			
			public function calculaMontoEnt():void{
				var acred:ArrayCollection = dgAcredEnt.dataProvider as ArrayCollection;
				var entregado:Number = 0;
				var devuelto:Number = 0;
				for (var i:int = 0; i < acred.length; i++){
					entregado += Number(acred[i].cantEntre);
					if(acred[i].sitAcred == 'D')
						devuelto += Number(acred[i].cantAutor);
				}
				formDatosGralPrn.txtEntregado.text = entregado.toString();
				formDatosGralPrn.txtDevuelto.text = devuelto.toString();
			}
			
			private function cambiaFormCal(tipoProd:String):void{
				if(tipoProd == "04"){				
					cvnCalendario.removeChild(formCalendarioSolic)
					cvnCalendario.addChild(formCalendarioSol);					
					formCalendarioSol.x = 75;
					formCalendarioSol.height = 205;	
					formCalendarioSol.init(info,tipoAccion,estatus);
				} 
			}
			
			public function cargaAcred(grupo:String, ciclo:String, fecSolic:String):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlAcred = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsCat);
					
					if (_xmlAcred.elements().length() > 0){
						formateaAcred(ciclo, fecSolic);
						//asigna la lista de acreditados a los formularios que la implementan
						formEntregaSolic.cargaAcred(acredObj);
						dgAcredEnt.dataProvider = Arr;
					} 	
					else{
						dgAcredEnt.dataProvider = null;
					}
				});
				params[0] = grupo;
				params[1] = ciclo;
				wsCat.getListado.send(10, params);
			}
			
			public function cargaInfoPrn(cdgGrupo:String, nomGrupo:String, ciclo:String, munic:String, coord:String, promotor:String):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				bandMod = true;
				init();
				this.coord = coord;
				this.grupo = cdgGrupo;
				this.ciclo = ciclo;
				this.clns = "G";
				this.promotor = promotor;
				txtGrupo.text = nomGrupo;
				txtCiclo.text = ciclo;
				txtMunicipio.text = munic;
				
				tabNav.selectedIndex= 1;
				
				initConexion();
				du.sCursor();
					
				du.ejecutaWsMethod(wsMS,function(evt:ResultEvent):void {											
					var res:String = evt.result.toString();
					
					du.rCursor();
					du.closeWs(wsMS);
					
					if (res.substr(0,1) != "1"){
						Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);
						desactivaControles();
					}
					
					du.initWsCat(wsCat);
					du.sCursor();
					
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						_xmlPrn = new XML(evt.result);
					
						du.rCursor();
						du.closeWs(wsCat);
					
						if (_xmlPrn.elements().length() > 0){
							cargaAcred(cdgGrupo, ciclo, _xmlPrn.Table[0].FECSOLIC);
							llenaRegistros();
						}
						else{
							Alert.show("Error en la carga de Datos",titulo,4,null,null,global.iAlert);
						}
					});
					params[0] = cdgGrupo;
					params[1] = ciclo;
					wsCat.getInfoGrupo.send(14, params);	
				});
				wsMS.getValidaSituacionInicialPrn.send(grupo, ciclo);	
			}
			
			public function cerrar():void{
				PopUpManager.removePopUp(this);
			}
			
			public function desactivaControles():void{
				bandMod = false;
				dgAcredEnt.editable = false;
				activaSituacion = false; //variable que controla el estatus de los CheckBox de situacion
			}
				
			public function enviar():void{
				global = new Globales();
				info = new DatosSolic();
				
				if(bandMod == true){
					//eventos enviar de los formularios incluidos
					formDatosGralPrn.enviarDatosSolic(info);
					validaFinal();
				}
				else{
					Alert.show("No es posible modificar el registro del préstamo.",titulo,4,null,null,global.iAlert);
				}
			}
			
			//funcion que realiza la carga de datos 
			public function formateaAcred(ciclo:String, fecSolic:String):void{
				var cont:int = _xmlAcred.elements().length();
				var oItem:Object;
				var item:Array = new Array;
				
				Arr.removeAll();
				acredObj.removeAll();
				
				for(var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.codigo = _xmlAcred.Table[i].CDGCL;
					oItem.nombre = _xmlAcred.Table[i].NOMBREC;
					oItem.solicitud = _xmlAcred.Table[i].FECSOL;
					oItem.situacion = _xmlAcred.Table[i].SITUACIONC;
					oItem.sitAcred = _xmlAcred.Table[i].SITUACION.toString(); 					
					oItem.cantAutor = _xmlAcred.Table[i].CANTAUTOR;
					oItem.cantEntre = _xmlAcred.Table[i].CANTENTRE;
					oItem.modifica = false;
					
					oItem.autorizado = false;
					oItem.entregado = false;
					oItem.devuelto = false;
					oItem.liquidado = false;
					switch(oItem.sitAcred){
						case "A":
							oItem.autorizado = true;
							break;
						case "T":
							oItem.autorizado = true;
							break;
						case "E":
							oItem.entregado = true;
							break;
						case "D":
							oItem.devuelto = true;
							break;
						case "L":
							oItem.liquidado = true;
							break;
					}
					item.push(oItem);
				}
				Arr = new ArrayCollection(item);
				acredObj = new ArrayCollection(item);
			}
			
			//funcion que da formato a la informacion que sera almacenada
			public function formateaRegAcred():Boolean{
				var listaAcred:ArrayCollection;
				listaAcred = dgAcredEnt.dataProvider as ArrayCollection;
					
				if (listaAcred != null){
					acred = new Array;
					situacionAcred = new Array;
					cantEntreAcred = new Array;
					
					var cont:int = listaAcred.length;
					var cantEntre:Number;
					var j:int = 0;
						
					for(var i:int = 0; i < cont; i++){
						if(listaAcred[i].modifica == true){ 
							acred[j] = listaAcred[i].codigo;
							cantEntre = Number(listaAcred[i].cantEntre);
							cantEntreAcred[j] = cantEntre;
							situacionAcred[j] = listaAcred[i].sitAcred;
							j++;
						}
					}
				}
				return true;
			}
			
			public function guardaPrn():void{
				if(formateaRegAcred() == true){ //valida que todos los clientes se hayan registrado con montos validos
					initConexion();
					global.bloquear();
					du.sCursor();
					//Servicio invocado en la etapa de registro del prestamo
					if(info.situacion == 'T')
						tipoAccion = 1;
					else if(info.situacion == 'E')
						tipoAccion = 2
					else if(info.situacion == 'D')
						tipoAccion = 3
					wsMS.addEventListener(ResultEvent.RESULT, setAccionPrn);
					wsMS.setAccionPrn.send(tipoAccion, global.obtenerUsuario(), grupo, txtCiclo.text, "G", info.entregado, 
											   info.devolucion, info.situacion, info.fecEntre, info.fecSolic, acred, cantEntreAcred, situacionAcred);
				}
			}
			
			public function init():void{
				openEffect.duration = 1000;
				openEffect.play([this]);
				global = new Globales();
				du = new Utils();
				titulo = "Mantenimiento de Préstamo";
			}
			
			public function initConexion():void{				
				wsMS = new WebService();			
				wsMS.wsdl = Application.application.wsStr.wsdlServ.toString();
				wsMS.loadWSDL();
			}	
			
			public function limpiaSituacion(indice:int):void{
				Arr[indice].autorizado = false;
				Arr[indice].entregado = false;
				Arr[indice].devuelto = false;
				//dgAcredEv.dataProvider = Arr;
			}
			
			public function llenaRegistros():void{
				var numInt:int;
				estatus= "entrega";
				info = new DatosSolic();
				//Datos de producto del credito
				info.cdgTipoProd = _xmlPrn.Table[0].CDGTPC;
				info.cdgProdCred = _xmlPrn.Table[0].CDGPCR;
				
				//Datos generales deL credito
				info.fecSolic = _xmlPrn.Table[0].FECSOLIC;
				info.fecEntre = _xmlPrn.Table[0].FECINICIO;
				info.situacion = _xmlPrn.Table[0].SITUACION;
				info.entregado = _xmlPrn.Table[0].CANTENTRE;
				info.autorizado = _xmlPrn.Table[0].CANTAUTOR;
				info.devolucion = _xmlPrn.Table[0].CANTDEVOL;
				info.devoluciones = _xmlPrn.Table[0].SUMADEV;
				info.moneda = _xmlPrn.Table[0].CDGMO;
				
				//Datos del calendario del credito
				info.periodicidad = _xmlPrn.Table[0].PERIODICIDAD;
				info.reunion = _xmlPrn.Table[0].NOACUERDO;
				info.diaJunta = _xmlPrn.Table[0].DIAJUNTA;
				info.diasGracia = _xmlPrn.Table[0].DESFASEPAGO;
 				info.duracion = _xmlPrn.Table[0].DURACION; 
				info.pagoCapital = _xmlPrn.Table[0].PERIGRCAP;
				info.pagoInteres = _xmlPrn.Table[0].PERIGRINT;
				info.multPerio = _xmlPrn.Table[0].MULTPER;
				info.horario = _xmlPrn.Table[0].HORARIO;
				
				//Tasas del credito
				info.metodoCobro = _xmlPrn.Table[0].CDGMCI;
				info.formaDist = _xmlPrn.Table[0].CDGFDI;
				info.instrumento = _xmlPrn.Table[0].CDGTI;
				info.interes = _xmlPrn.Table[0].TASA;
				
				//Datos de recargos de la solicitud
				info.metodoAplic = _xmlPrn.Table[0].METRECA;
				info.aplican = _xmlPrn.Table[0].MODOAPLIRECA;
				info.tasaFija = _xmlPrn.Table[0].TASARECFIJ;
				info.factorTasa = _xmlPrn.Table[0].TASARECTAS;
				
				//Datos de la mesa directiva del grupo
				info.presidente = _xmlPrn.Table[0].PRESIDENTE;
				info.secretario = _xmlPrn.Table[0].SECRETARIO;
				info.tesorero = _xmlPrn.Table[0].TESORERO;
				
				//Datos de entrega del credito
				info.formaEntre = _xmlPrn.Table[0].FORMAENTREGA;
				info.nombreCheq = _xmlPrn.Table[0].NOMBRECH;
				
				numInt = Number(_xmlPrn.Table[0].NUMINT);
				
				info.tipoProdRel = _xmlPrn.Table[0].CDGTPCREL;
				info.cdgclnsRel = _xmlPrn.Table[0].CDGCLNSREL;
				info.cicloRel = _xmlPrn.Table[0].CICLOREL;
				info.clnsRel = _xmlPrn.Table[0].CLNSREL;
				
				this.tipoProdRel = _xmlPrn.Table[0].CDGTPCREL;
				
				formProdSolic.init("OP", this.grupo, this.ciclo, this.clns, numInt, info, 2);
				formDatosGralPrn.init(info, 2, estatus);
				if(tipoProdRel == "01")
					formCalendarioSolic.init(info, 2, estatus);
				else if(tipoProdRel == "04")
					cambiaFormCal(tipoProdRel);
				formTasasSolic.init(info, 2, estatus);
				formRecargosSolic.init(info, 2, estatus);
				formEntregaSolic.init(info, 2, estatus);
				formRelacSolic.init(this.grupo, info, 2, estatus);
			}
			
			public function selSituacion(event:ItemClickEvent):void{
				var situacion:String = RadioButtonGroup(event.currentTarget).selection.label;
				actualizaSituacion(situacion);
			}
			
			public function selAutorizadoAcredPrn(event:Event):void{
				indAcred = dgAcredEnt.selectedIndex;
				var vScroll:Number = dgAcredEnt.verticalScrollPosition;
				limpiaSituacion(indAcred);
				Arr[indAcred].modifica = true;
				Arr[indAcred].autorizado = true;
				Arr[indAcred].sitAcred = 'T';
				Arr[indAcred].situacion = 'Autorizado';
				Arr[indAcred].cantEntre = "";
				dgAcredEnt.dataProvider = Arr;
				dgAcredEnt.validateNow();
				dgAcredEnt.selectedItem = indAcred;
				dgAcredEnt.verticalScrollPosition = vScroll;
				calculaMontoEnt();
				//establece la situacion general como autorizado 
				formDatosGralPrn.selSituacion(Arr[indAcred].sitAcred);
			}
			
			public function selDevueltoAcredPrn(event:Event):void{
				indAcred = dgAcredEnt.selectedIndex;
				var vScroll:Number = dgAcredEnt.verticalScrollPosition;
				limpiaSituacion(indAcred);
				Arr[indAcred].modifica = true;
				Arr[indAcred].devuelto = true;
				Arr[indAcred].sitAcred = 'D';
				Arr[indAcred].situacion = 'Devuelto';
				Arr[indAcred].cantEntre = "0";
				dgAcredEnt.dataProvider = Arr;
				dgAcredEnt.validateNow();
				dgAcredEnt.selectedItem = indAcred;
				dgAcredEnt.verticalScrollPosition = vScroll;
				calculaMontoEnt();
				validaSituacionGral(Arr[indAcred].sitAcred);
				validaSituacionAut();
			}
			
			public function selEntregadoAcredPrn(event:Event):void{
				indAcred = dgAcredEnt.selectedIndex;
				var vScroll:Number = dgAcredEnt.verticalScrollPosition;
				limpiaSituacion(indAcred);
				Arr[indAcred].modifica = true;
				Arr[indAcred].entregado = true;
				Arr[indAcred].sitAcred = 'E';
				Arr[indAcred].situacion = 'Entregado';
				Arr[indAcred].cantEntre = Arr[indAcred].cantAutor;
				dgAcredEnt.dataProvider = Arr;
				dgAcredEnt.validateNow();
				dgAcredEnt.selectedItem = indAcred;
				dgAcredEnt.verticalScrollPosition = vScroll;
				calculaMontoEnt();
				validaSituacionGral(Arr[indAcred].sitAcred);
				validaSituacionAut();
			}
			
			private function setAccionPrn(event:ResultEvent):void{
				wsMS.disconnect();
				du.rCursor();
				global.desbloquear();
				wsMS.removeEventListener(ResultEvent.RESULT, setAccionPrn);
				var res:String = event.result.toString();
				if (res.substr(0,1) == "1"){
					cerrar();
				}	
				else
					Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);		
			}
			
			public function validaSituacion():Boolean{
				var i:int;
				//condicion que verifica la situacion de la solicitud
				if(info.situacion != 'S'){
					for(i = 0; i < Arr.length; i++){
						if(Arr[i].sitAcred == 'S'){
							Alert.show("El acreditado " + Arr[i].nombre + " se encuentra en situación " + Arr[i].situacion + ".\n\nModifique la condición del cliente",titulo,4,null,null,global.iAlert);
							return false;
						}
					}
				}
				if(info.situacion == 'S'){
					for(i = 0; i < Arr.length; i++){
						if(Arr[i].sitAcred != 'S'){
							Alert.show("El acreditado " + Arr[i].nombre + " se encuentra en situación " + Arr[i].situacion + ".\n\nModifique la condición del cliente",titulo,4,null,null,global.iAlert);
							return false;
						}
					}
				}
				return true;
			}
			
			public function validaSituacionAut():void{
				var band:Boolean = true;
				var i:int;
				for(i = 0; i < Arr.length; i++){
					if(Arr[i].sitAcred == 'T'){
						band = false;
						break;
					}
				}
				if(band == true){
					for(i = 0; i < Arr.length; i++){
						if(Arr[i].sitAcred == 'E'){
							formDatosGralPrn.selSituacion('E');
							band = false;
							break;
						}
					}
					if(band == true)
						formDatosGralPrn.selSituacion('D');
				}
			}
			
			//Funcion que modifica la situacion de la solicitud 
			//basandose en la situacion que presentan todos los acreditados
			public function validaSituacionGral(situacion:String):void{
				var band:Boolean = true;
				for(var i:int = 0; i < Arr.length; i++){
					if(situacion != Arr[i].sitAcred)
						band = false;
				}
				if(band == true)
					formDatosGralPrn.selSituacion(situacion);
			}
			
			
			public function validaSituacionInicialPrn():void{
				initConexion();
				du.sCursor();
					
				du.ejecutaWsMethod(wsMS,function(evt:ResultEvent):void {											
					var res:String = evt.result.toString();
					
					du.rCursor();
					du.closeWs(wsMS);
					
					if (res.substr(0,1) != "1"){
						Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);
						desactivaControles();
					}	
					
				});
				wsMS.getValidaSituacionInicialPrn.send(grupo, ciclo);	
			}
			
			public function validaDatosSolic(event:EventSolic):void{
				info = event.customProp;
			}
			
			public function validaFinal():void{
				if (info.guardaDatos == true)
					guardaPrn();
				else
					Alert.show("Debe capturar los datos requeridos",titulo,4,null,null,global.iAlert);
			}
			
			public function validaMonto(event:Event):void{	
				numVal.source = TextInput(event.currentTarget);
				vResult = numVal.validate();

				if (vResult.type!=ValidationResultEvent.VALID)
                	TextInput(event.currentTarget).text = "";
			}
		]]>
	</mx:Script>

	 <mx:NumberValidator id="numVal" property="text" precision="2"
        allowNegative="true" domain="real" decimalSeparator="." thousandsSeparator="," required="false"/>

	<mx:TabNavigator id="tabNav" width="824" height="251" x="10" y="52" creationPolicy="all">
		<mx:Canvas label="Producto" width="100%" height="100%">
			<Forms:FormProductoSolic id="formProdSolic" x="140" y="39" width="540" height="130"/>
		</mx:Canvas>
		<mx:Canvas id="datosGrals" label="Datos Generales" width="100%" height="100%">	
			<Forms:FormDatosGralPrn id="formDatosGralPrn" height="195" width="800" x="10" y="10"/>
		</mx:Canvas>
		<mx:Canvas id="cvnCalendario" label="Calendario" width="100%" height="100%">	
			<Forms:FormCalendarioSolic id="formCalendarioSolic" x="75" height="205"/>
		</mx:Canvas>
		<mx:Canvas label="Tasas" width="100%" height="100%">	
			<Forms:FormTasasSolic id="formTasasSolic" x="55" height="195" y="10"/>
		</mx:Canvas>
		<mx:Canvas label="Recargos" width="100%" height="100%">	
			<Forms:FormRecargosSolic id="formRecargosSolic" x="60"/>
		</mx:Canvas>
		<mx:Canvas label="Entrega/Pagos" width="100%" height="100%" id="canvas2">	
			<Forms:FormEntregaSolic id="formEntregaSolic" x="134"/>
		</mx:Canvas>
		<mx:Canvas label="Relacionado" width="100%" height="100%">
			<Forms:FormRelacionadoSolic id="formRelacSolic" x="141" y="48" width="540" height="110"/>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Button id="btnCancelar" x="794" y="528" icon="@Embed(source='assets/images/iconCancel.png')" click="cerrar()" width="40"/>
	<mx:Button id="btnAceptar" x="746" y="528" icon="@Embed(source='assets/images/iconAccept.png')" click="enviar()" width="40"/>
	<mx:Canvas x="87" y="10" width="670" height="37" styleName="canvasMod">
		<mx:Label x="13" y="8" text="Grupo Solidario:"/>
		<mx:TextInput id="txtGrupo" x="99" y="5" width="199" editable="false"/>
		<mx:Label x="311" y="8" text="Ciclo:"/>
		<mx:Label x="422" y="8" text="Municipio:"/>
		<mx:TextInput x="477" y="5" width="181" id="txtMunicipio" editable="false"/>
		<mx:TextInput x="345" y="5" width="45" id="txtCiclo" editable="false"/>
	</mx:Canvas>
	<mx:Canvas x="10" y="311" width="824" height="209" styleName="canvasMod" id="canvas1">
		<mx:DataGrid id="dgAcredEnt" x="10" y="10" width="802" height="187" 
		    	editable="true" sortableColumns="false">
				<mx:columns>
					<mx:DataGridColumn headerText="CODIGO" editable="false" dataField="codigo" width="40"/>
					<mx:DataGridColumn headerText="ACREDITADO" editable="false" dataField="nombre" width="120"/>
					<mx:DataGridColumn headerText="FECHA" editable="false" dataField="solicitud" width="50"/>
					<mx:DataGridColumn headerText="M. AUTORIZADO" dataField="cantAutor" width="70" editable="false"/>	
					<mx:DataGridColumn headerText="AUTORIZADO" textAlign="center" rendererIsEditor="true" dataField="autorizado" width="60" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selAutorizadoAcredPrn(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="ENTREGADO" rendererIsEditor="true" textAlign="center" dataField="entregado" width="60" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selEntregadoAcredPrn(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="DEVUELTO" textAlign="center" rendererIsEditor="true" dataField="devuelto" width="50" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selDevueltoAcredPrn(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="LIQUIDADO" textAlign="center" rendererIsEditor="true" dataField="liquidado" width="50" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox enabled="false"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="M. ENTREGADO" editable="false" dataField="cantEntre" width="70">
						<mx:itemEditor>
							<mx:Component>
			  					<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaMontoEnt()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
			  				</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
	</mx:Canvas>	
</mx:TitleWindow>