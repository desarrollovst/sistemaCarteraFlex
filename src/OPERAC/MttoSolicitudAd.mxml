<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:forms="forms.*" xmlns:control="control.*" 
	layout="absolute" width="844" height="600" title="Edición" showCloseButton="true" close="cerrar()" 
	xmlns:Forms="OPERAC.Forms.*" xmlns:Control="OPERAC.Control.*">
	<mx:states>
		<mx:State name="evaluacion">
			<mx:RemoveChild target="{dgAcred}"/>
			<mx:RemoveChild target="{btnGuardarHor}"/>
			<mx:AddChild relativeTo="{canvas1}" position="lastChild">
				<mx:DataGrid id="dgAcredEv" x="10" y="10" width="802" height="187" 
		    	editable="true" sortableColumns="false" itemEditBegin="desactivaEdicion(event)">
				<mx:columns>
					<mx:DataGridColumn headerText="CODIGO" editable="false" headerWordWrap="true" dataField="codigo" width="45"/>
					<mx:DataGridColumn headerText="ACREDITADO" editable="false" headerWordWrap="true" dataField="nombre" width="140"/>
					<!--<mx:DataGridColumn headerText="SOLICITUD" editable="false" headerWordWrap="true" dataField="solicitud" width="55"/>-->
					<mx:DataGridColumn headerText="MONTO SOLICITADO" headerWordWrap="true" dataField="cantSolic" width="65" editable="false"/>	
					<mx:DataGridColumn headerText="SOLICITADO" textAlign="center" headerWordWrap="true" rendererIsEditor="true" dataField="solicitado" width="60" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selSolicitadoAcredEv(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="AUTORIZADO" headerWordWrap="true" rendererIsEditor="true" textAlign="center" dataField="autorizado" width="65" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selAutorizadoAcredEv(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="RECHAZADO" headerWordWrap="true" textAlign="center" rendererIsEditor="true" dataField="rechazado" width="65" editorDataField="selected" editable="false">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:CheckBox change="outerDocument.selRechazadoAcredEv(event)" enabled="{outerDocument.activaSituacion}"/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="MONTO AUTORIZADO" headerWordWrap="true" editable="true" dataField="cantAutor" width="65">
						<mx:itemEditor>
							<mx:Component>
			  					<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaMontoAutorizado()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
			  				</mx:Component>
						</mx:itemEditor>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="REP" headerWordWrap="true" editable="true" width="30">
						<mx:itemRenderer>
							<mx:Component>
			  					<mx:Button click="outerDocument.muestraReporte()" width="10" label="..."/> 
			  				</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
		</mx:DataGrid>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button id="btnGuardar" x="10" y="529" label="Guardar" width="80" click="modificaSolic()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{tabNav}" position="lastChild">
				<mx:Canvas label="Excepciones" width="100%" height="100%">
					<Forms:FormExcepcionEv id="formExcepcionEv" height="195" width="800" x="10" y="10"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{tabNav}" position="lastChild">
				<mx:Canvas label="Análisis" width="100%" height="100%">
					<Forms:FormAnalisis id="formAnalisis" height="211" y="0" x="11"/>	
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import OPERAC.Forms.FormCalendarioSolicSol;
			import Data.EventSolic;
			import Data.DatosSolic;
			import Data.Globales;
			import Data.Utils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.controls.DateField;
			import mx.controls.RadioButtonGroup;
			import mx.core.Application;
			import mx.effects.*;
			import mx.events.MoveEvent;
			import mx.events.FlexEvent;
			import mx.events.CollectionEvent;
			import mx.events.ValidationResultEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.soap.WebService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable]	
			public var activaSituacion:Boolean = true; //variable que controla el estatus de los Checks de situacion
			[Bindable]
			public var info:DatosSolic;
			private var _xmlSolic:XML =  new XML();
			private var _xmlAcred:XML =  new XML();
			private var _xmlCiclo:XML =  new XML();
			private var _xmlControl:XML =  new XML();	
			private var _xmlPres:XML =  new XML();
			
			public var comAvalAcred:AvalAcred;
			
			//arreglos para almacenar la informacion individual de los acreditados
			public var acred:Array;
			public var montos:Array; 
			public var cantAutorAcred:Array;
			public var situacionAcred:Array;
			public var rechazo:Array;
			public var reporte:Array;
			public var causaBaja:Array;
			public var proyInv:Array;
			public var tipoSeguro:Array;
			public var emplGenH:Array;
			public var emplGenM:Array;
			public var emplSostH:Array;
			public var emplSostM:Array;
			public var aval:Array;
			
			[Bindable]
			public var Arr:ArrayCollection = new ArrayCollection();
			public var acredObj:ArrayCollection = new ArrayCollection();
			public var sitObj:ArrayCollection = new ArrayCollection();
			
			public var situacion:Array = new Array();
			
			private var vResult:ValidationResultEvent;
			
			private var du:Utils;
			private var global:Globales;
			private var estatus:String;
			private var tipoProdRel:String;
			private var wsMS:WebService;
			private var wsEmail:WebService;
			private var wsReg:WebService;
			private var wsPayCash:WebService;
			public var bandMod:Boolean;	
			public var tipoAccion:int;
			public var indAcred:int;
			public var suc:String;
			public var grupo:String;
			public var ciclo:String;
			public var clns:String;
			public var solicitud:String;
			//public var montoMin:Number;
			//public var montoMax:Number;
			public var promotor:String;
			public var titulo:String;
			public var openEffect:Fade = new Fade();
			
			public var formCalendarioSol:FormCalendarioSolicSol = new FormCalendarioSolicSol();
			
			private function actualizaCredRelac(event:Event):void{
				var wsCat:WebService = new WebService;
				var params:Array = new Array;
				var tipoProd:String;
				var cdgclnsRel:String;
				var cicloRel:String;
				var clnsRel:String;
				var comRelac:FormRelacionadoSolic = event.currentTarget as FormRelacionadoSolic;
				tipoProd = comRelac.obtieneTipoProd();
				cdgclnsRel = comRelac.obtieneCodigo();
				cicloRel = comRelac.obtieneCiclo();
				clnsRel = "G";
				
				this.tipoProdRel = tipoProd;	
				
				formRelacSolic.removeEventListener("validarCredRel",actualizaCredRelac);
				
				initConexion();
				du.sCursor();
					
				du.ejecutaWsMethod(wsMS,function(evt:ResultEvent):void {											
					var res:String = evt.result.toString();
					
					du.rCursor();
					du.closeWs(wsMS);
					
					if(res == "1"){
						if(tipoProd == "01"){
							du.initWsCat(wsCat);
							du.sCursor();
							
							du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
								var _xmlHor:XML = new XML(evt.result);
								
								du.rCursor();
								du.closeWs(wsCat);
								
								var horario:String = _xmlHor.Table[0].HORARIO;
								formCalendarioSolic.actualizaReunion(_xmlHor.Table[0].NOACUERDO);
								formCalendarioSolic.actualizaHora(horario.substr(0,2), horario.substr(3,2));
							});
							params[0] = cdgclnsRel;
							params[1] = clnsRel;
							params[2] = cicloRel;
							wsCat.getInfoGeneral.send(3, params);
						}
						else{
							cambiaFormCal(tipoProd);
						}
					}
					else if(res == "0"){
						Alert.show("Crédito Relacionado incorrecto. Verifique los datos capturados.",titulo,4,null,null,global.iAlert);
						formRelacSolic.limpia();
					}
					formRelacSolic.addEventListener("validarCredRel",actualizaCredRelac);
				});
				wsMS.getValidaCredRel.send(grupo, "G", tipoProd, cdgclnsRel, clnsRel, cicloRel);
			}
			
			public function actualizaDatos(event:Event):void{
				var comAvalAcred:AvalAcred = event.currentTarget as AvalAcred;
				Arr[indAcred].aval = comAvalAcred.obtieneAcred();
				Arr[indAcred].nomAval = comAvalAcred.obtieneNomAcred(); 
				dgAcred.dataProvider = Arr;
			}
			
			public function actualizaFecEntre(event:CalendarLayoutChangeEvent):void{
				var fecSel:Date = DateField(event.currentTarget).selectedDate;
				formCalendarioSolic.actualizaDiaJunta(fecSel.getDay().toString());
			}
			
			public function actualizaFecSolic(event:CalendarLayoutChangeEvent):void{
				var fecSolic:String = global.formatearFecha(DateField(event.currentTarget).selectedDate);
				actualizaListaAcred(fecSolic);
			}
			
			public function actualizaListaAcred(fecSolic:String):void{
				if(tipoAccion == 1)
					cargaAcred(grupo, "", fecSolic);
				else if(tipoAccion == 2)
					cargaAcred(grupo, txtCiclo.text, fecSolic);
			}
			
			public function actualizaListaProd(event:CollectionEvent):void{
				activaControles(info.cdgTipoProd, info.cdgProdCred, 2);
			}
			
			private function actualizaProdCred(event:Event):void{
				var formProd:FormProductoSolic = event.currentTarget as FormProductoSolic;
				activaControles(formProd.obtieneTipoProd(), formProd.obtieneProdCred(), 1);
			}
			
			//Funcion que actualiza la situacion de la solicitud
			public function actualizaSituacion(situacion:String):void{
				var cont:int = _xmlAcred.elements().length();
				
				for(var i:int = 0; i < cont; i++){
					Arr[i].situacion = situacion;
				}
				dgAcred.dataProvider = Arr;
			}
			
			//funcion que permite activar los controles que integran la captura de la solicitud
			public function activaControles(tipoProd:String, prodCred:String, tipo:int):void{
				//tipo = 1   CARGA PARAMETROS DEL PRODUCTO Y ACTIVA CONTROLES CAPTURA
				//tipo = 2   SOLO ACTIVA LOS CONTROLES DE CAPTURA
				var wsCat:WebService = new WebService();
				var params:Array = new Array();
				
				du.initWsCat(wsCat);
				du.sCursor();
				
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlControl = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsCat);
					
					if (_xmlControl.elements().length() > 0){
						//montoMin = Number(_xmlControl.Table[0].MONTOMIN);
						//montoMax = Number(_xmlControl.Table[0].MONTOMAX);
						if(currentState == null){
							formDatosGralSolic.activaControles(_xmlControl);
							if(tipoProdRel == "01")
								formCalendarioSolic.activaControles(_xmlControl);
							else if(tipoProdRel == "04")
								formCalendarioSol.activaControles(_xmlControl);
							formTasasSolic.activaControles(_xmlControl);
							formRecargosSolic.activaControles(_xmlControl);
							formEntregaSolic.activaControles(_xmlControl);						
							if(tipo == 1){
								formDatosGralSolic.cargaParamsProd(_xmlControl);
								if(tipoProdRel == "01")
									formCalendarioSolic.cargaParamsProd(_xmlControl);
								else if(tipoProdRel == "04")
									formCalendarioSol.cargaParamsProd(_xmlControl);
								formTasasSolic.cargaParamsProd(_xmlControl);	
								formRecargosSolic.cargaParamsProd(_xmlControl);
								formEntregaSolic.cargaParamsProd(_xmlControl);
							}
						}
					}
				});
				params[0] = tipoProd;
				params[1] = prodCred;
				wsCat.getInfoRegistro.send(1, params);
			}
			
			public function calculaMontoAutorizado():void{
				var acred:ArrayCollection = dgAcredEv.dataProvider as ArrayCollection;
				var autorizado:Number = 0;
				for(var i:int = 0; i < acred.length; i++){
					autorizado += Number(acred[i].cantAutor);
				}
				formDatosGralSolic.txtAutorizado.text = autorizado.toString();
			}
						
			public function calculaMonto():void{
				var acred:ArrayCollection = dgAcred.dataProvider as ArrayCollection;
				var solicitado:Number = 0;
				for(var i:int = 0; i < acred.length; i++){
					solicitado += Number(acred[i].cantSolic);
				}
				formDatosGralSolic.txtSolicitado.text = solicitado.toString();
			}
			
			private function cambiaFormCal(tipoProd:String):void{
				if(tipoProd == "04"){				
					cvnCalendario.removeChild(formCalendarioSolic)
					cvnCalendario.addChild(formCalendarioSol);					
					formCalendarioSol.x = 75;
					formCalendarioSol.height = 205;	
					formCalendarioSol.init(info,tipoAccion,estatus);
				} 
			}
			
			public function cargaAcred(grupo:String, ciclo:String, fecSolic:String):void{
				var wsCat:WebService = new WebService();
				var params:Array = new Array();
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlAcred = new XML(evt.result.toString());
					
					du.rCursor();
					du.closeWs(wsCat);
					
					if (_xmlAcred.elements().length() > 0){
						formateaAcred(ciclo, fecSolic);
						//asigna la lista de acreditados a los formularios que la implementan
						formEntregaSolic.cargaAcred(acredObj);
						if(currentState == null)
							dgAcred.dataProvider = Arr;
						else if(currentState == 'evaluacion')
							dgAcredEv.dataProvider = Arr;
					} 	
					else{
						if(currentState == null)
							dgAcred.dataProvider = null;
						else if(currentState == 'evaluacion')
							dgAcredEv.dataProvider = null;
					}
					wsCat = null;
				});
				params[0] = grupo;
				if(ciclo != ""){
					params[1] = ciclo;
					wsCat.getListado.send(3, params);
				}
				else if(ciclo == ""){
					params[1] = fecSolic;
					wsCat.getListado.send(4, params); //METODO QUE MUESTRA LA LISTA DE ACREDITADOS QUE CORRESPONDEN A UNA NUEVA SOLICITUD 
				}
			}
			
			public function cargaInfoSolic(cdgGrupo:String, nomGrupo:String, ciclo:String, nomSuc:String, suc:String, promotor:String):void{
				var wsCat:WebService = new WebService();
				var params:Array;
				var fecSolic:String;
				tipoAccion = 2;
				bandMod = true;
				init();
				this.suc = suc;
				this.grupo = cdgGrupo;
				this.ciclo = ciclo;
				this.clns = "G";
				this.promotor = promotor;
				txtGrupo.text = nomGrupo;
				txtCiclo.text = ciclo;
				txtSucursal.text = nomSuc;
				
				if(currentState == 'evaluacion')
					//selecciona la pestaña Datos Generales si la solicitud se encuentra en proceso de evaluacion
					tabNav.selectedIndex= 1;
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					_xmlSolic = new XML(evt.result);
					
					du.rCursor();
					du.closeWs(wsCat);
					
					if (_xmlSolic.elements().length() > 0){
						//SI LA SOLICITUD FUE RECHAZADA NO PERMITE MODIFICAR EL REGISTRO
						if(_xmlSolic.Table[0].SITUACION == 'R'){
							desactivaControles();
							bandMod = false;
							Alert.show("No es posible modificar la información. La solicitud ya fue Rechazada.",titulo,4,null,null,global.iAlert);
						}
						
						//SI LA SOLICITUD FUE AUTORIZADA NO ES POSIBLE EDITARLA
						if(_xmlSolic.Table[0].SITUACION == 'A' && currentState == null){
							desactivaControles();
							bandMod = false;
							//ACTIVA EL BOTON QUE PERMITE MODIFICAR EL HORARIO Y DIA DE JUNTA
							btnGuardarHor.visible = true;
							Alert.show("Unicamente es posible modificar el día de junta y horario de reunión, debido a que la solicitud ya fue Autorizada.",titulo,4,null,null,global.iAlert);
						}
						
						//SI LA SOLICITUD FUE AUTORIZADA PUEDE SER MODIFICADA POR MESA DE CONTROL
						//ANTES DE QUE SEA AUTORIZADA POR TESORERIA
						if(_xmlSolic.Table[0].SITUACION == 'A' && currentState == 'evaluacion'){
							du.initWsCat(wsCat);
							du.sCursor();
							
							du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
								_xmlPres = new XML(evt.result);
								
								du.rCursor();
								du.closeWs(wsCat);
								
								if(_xmlPres.elements().length() == 0){
									desactivaControles();
									bandMod = false;
									Alert.show("No es posible modificar la información. La solicitud ya fue Autorizada.",titulo,4,null,null,global.iAlert);
								}				
							});
							//Consulta la tabla de prestamo para verificar que la situacion sea autorizado
							params = new Array();
							params[0] = cdgGrupo;
							params[1] = ciclo;
							wsCat.getInfoGrupo.send(5, params);
						}
						solicitud = _xmlSolic.Table[0].SOLICITUD;
						fecSolic = _xmlSolic.Table[0].FECSOLIC;
						cargaAcred(cdgGrupo, ciclo, fecSolic);
						llenaRegistros();
					}
					else{
						Alert.show("Error en la carga de Datos",titulo,4,null,null,global.iAlert);
					}
				});
				params = new Array();
				params[0] = cdgGrupo;
				params[1] = ciclo;
				wsCat.getInfoGrupo.send(4, params)
			}
			
			public function cerrar():void{
				PopUpManager.removePopUp(this);
			}
			
			public function desactivaControles():void{
				if(currentState == null)
					dgAcred.editable = false;
				else if(currentState == 'evaluacion'){
					dgAcredEv.editable = false;
					activaSituacion = false; //variable que controla el estatus de los CheckBox de situacion
				}
			}
			
			public function desactivaEdicion(event:DataGridEvent):void{
				if(dgAcredEv.selectedItem.autorizado != true && dgAcredEv.selectedItem.solicitado != true)
					event.preventDefault();
				calculaMontoAutorizado();
			}
	
			public function enviar():void{
				info = new DatosSolic();
				
				if(_xmlSolic == "" || _xmlSolic.Table[0].SITUACION == 'S' || bandMod == true){
					if(validaSolicitado() == false)
						return;
					if(validaAval() == false)
						return;
					//eventos enviar de los formularios incluidos
					formProdSolic.enviarDatosSolic(info);
					formDatosGralSolic.enviarDatosSolic(info);
					if(tipoProdRel == "01")
						formCalendarioSolic.enviarDatosSolic(info);
					else if(tipoProdRel == "04")
						formCalendarioSol.enviarDatosSolic(info);
					formTasasSolic.enviarDatosSolic(info);
					formRecargosSolic.enviarDatosSolic(info);
					formEntregaSolic.enviarDatosSolic(info);
					formRelacSolic.enviarDatosSolic(info);
					if(currentState == 'evaluacion'){
						formExcepcionEv.enviarDatosSolic(info);
						formAnalisis.enviarDatosSolic(info);
					}
					if(validaAutorizado())
						validaFinal();
				}
				else{
					Alert.show("No es posible modificar el registro de la solicitud.",titulo,4,null,null,global.iAlert);
				}
			}
			
			/*private function editEndHandler(event:DataGridEvent):void {
                var myEditor:TextInput = TextInput(event.currentTarget.itemEditorInstance);
                var newVal:String = global.formatoDecimalSinSep(myEditor.text);
                var oldVal:String = global.formatoDecimalSinSep(Number(event.currentTarget.editedItemRenderer.data[event.dataField]).toString()); 
            
              	if (event.reason == DataGridEventReason.CANCELLED || event.reason == DataGridEventReason.OTHER || oldVal == newVal) {
			      	event.preventDefault();
	            	dgAcred.destroyItemEditor();
	          		return;
            	}
   			}*/
			
			public function enviarHorario():void{
				info = new DatosSolic();
				
				formCalendarioSolic.enviarDatosSolic(info);
				validaHorario();
			}
			
			//funcion que realiza la carga de datos 
			public function formateaAcred(ciclo:String, fecSolic:String):void{
				var cont:int = _xmlAcred.elements().length();
				var oItem:Object;
				var item:Array = new Array();
				
				Arr.removeAll();
				acredObj.removeAll();
				
				for(var i:int = 0; i < cont; i++){
					oItem = new Object();
					oItem.codigo = _xmlAcred.Table[i].CDGCL;
					oItem.nombre = _xmlAcred.Table[i].NOMBRE_CL;
					oItem.telefono = _xmlAcred.Table[i].TELEFONO;
					if(ciclo == ""){
						oItem.solicitud = fecSolic;
						oItem.cantSolic = 0;
						oItem.situacion = "Solicitado";
						oItem.sitAcred = "S";
						oItem.cantAut = 0;
						oItem.causaBaja = "";
						//informacion de la causa de rechazo
						oItem.rechazo = "";
						//informacion del proyecto de inversion
						oItem.proyecto = "";
						oItem.emplSostH = 0;
						oItem.emplSostM = 0;
						oItem.emplGenH = 0;
						oItem.emplGenM = 0;
						oItem.aval = "";
						oItem.nomAval = "";
					}
					else if(ciclo != ""){
						oItem.solicitud = _xmlAcred.Table[i].FECSOL;
						oItem.cantSolic = _xmlAcred.Table[i].CANTSOLIC;
						oItem.situacion = _xmlAcred.Table[i].SITUACIONC;
						oItem.sitAcred = _xmlAcred.Table[i].SITACRED.toString(); 
						//informacion del proyecto de inversion 
						oItem.proyecto = _xmlAcred.Table[i].PROYECTO.toString();
						oItem.emplSostH = _xmlAcred.Table[i].EMPLSOSTH;
						oItem.emplSostM = _xmlAcred.Table[i].EMPLSOSTM;
						oItem.emplGenH = _xmlAcred.Table[i].EMPLGENH;
						oItem.emplGenM = _xmlAcred.Table[i].EMPLGENM;
						oItem.cantAutor = _xmlAcred.Table[i].CANTAUTOR;
						//Incorpora informacion del Aval del Credito
						oItem.aval = _xmlAcred.Table[i].AVAL;
						oItem.nomAval = _xmlAcred.Table[i].NOMAVAL;
					}
					oItem.solicitado = false;
					oItem.autorizado = false;
					oItem.rechazado = false;
					switch(oItem.sitAcred){
						case "S":
							oItem.solicitado = true;
							break;
						case "A":
							oItem.autorizado = true;
							break;
						case "R":
							oItem.rechazado = true;
							break;
					}
					//informacion de la causa de rechazo
					oItem.rechazo = _xmlAcred.Table[i].RECHAZO;
					oItem.reporte = _xmlAcred.Table[i].REPORTE;
					if(oItem.proyecto != "")
						oItem.datos = "OK";
					//No ejecuta las ultimas lineas de codigo debido a que los acreditados 
					//no se desplegaran en el proceso de evaluacion
					if(oItem.sitAcred == "B" && currentState == "evaluacion")
						continue;
					item.push(oItem);	
				}
				Arr = new ArrayCollection(item);
				acredObj = new ArrayCollection(item);
			}
			
			//funcion que da formato a la informacion que sera almacenada
			public function formateaRegAcred():Boolean{
				var listaAcred:ArrayCollection;
				if(currentState == null)				
					listaAcred = dgAcred.dataProvider as ArrayCollection;
				if(currentState == 'evaluacion')
					listaAcred = dgAcredEv.dataProvider as ArrayCollection;
					
				if (listaAcred != null){
					acred = new Array;
					montos = new Array;
					cantAutorAcred = new Array;
					situacionAcred = new Array;
					rechazo = new Array;
					reporte = new Array;
					causaBaja = new Array;
					proyInv = new Array;
					tipoSeguro = new Array;
					emplGenH = new Array;
					emplGenM = new Array;
					emplSostH = new Array;
					emplSostM = new Array;
					aval = new Array;
					
					var cont:int = listaAcred.length;
					var cantSolic:Number;
					var cantAutor:Number;
						
					for(var i:int = 0; i < cont; i++){
						acred[i] = listaAcred[i].codigo.toString();
						cantSolic = Number(listaAcred[i].cantSolic);
						cantAutor = Number(listaAcred[i].cantAutor);
						situacionAcred[i] = listaAcred[i].situacion;
						montos[i] = cantSolic;

						//Asignaciones en la etapa de registro de la solicitud
						if(currentState == null){
							situacionAcred[i] = listaAcred[i].sitAcred;
							causaBaja[i] = listaAcred[i].causaBaja;
							tipoSeguro[i] = "";
							emplGenH[i] = Number(listaAcred[i].emplGenH);
							emplGenM[i] = Number(listaAcred[i].emplGenM);
							emplSostH[i] = Number(listaAcred[i].emplSostH);
							emplSostM[i] = Number(listaAcred[i].emplSostM);
						}
						//Asignaciones en la etapa de evaluacion de la solicitud
						else if(currentState == 'evaluacion'){
							cantAutorAcred[i] = cantAutor;
							
							//Asigna la situacion de la solicitud a cada cliente
							situacionAcred[i] = listaAcred[i].sitAcred;
		
							//Asigna la causa de rechazo de cada cliente
							rechazo[i] = listaAcred[i].rechazo;
							//Asigna el reporte de Analisis de Credito
							reporte[i] = listaAcred[i].reporte;
						}
						proyInv[i] = listaAcred[i].proyecto;
						aval[i] = listaAcred[i].aval;
					}
				}
				return true;
			}
			
			private function formateaSituacion():void{
				var oItem:Object;
				var item:Array = new Array();
				
				oItem = new Object();
				oItem.descripcion = "Solicitado";
				oItem.id = "S";
				item.push(oItem);
				
				oItem = new Object();
				oItem.descripcion = "No Renueva";
				oItem.id = "B";
				item.push(oItem);
				
				sitObj = new ArrayCollection(item);
				
				situacion[0] = "Solicitado";
				situacion[1] = "No Renueva";
			}
			
			public function guardaHorario():void{
				initConexion();
				du.sCursor();
				global.bloquear();
				wsMS.addEventListener(ResultEvent.RESULT, setModHorario);
				wsMS.setModHorario.send(grupo, "G", txtCiclo.text, info.reunion, info.horario);
			}
			
			public function guardaSolic():void{
				if(formateaRegAcred() == true){ //valida que todos los clientes se hayan registrado con montos validos
					initConexion();
					du.sCursor();
					global.bloquear();
					//Servicio invocado en la etapa de registro de la solicitud
					if(currentState == null){
						wsMS.addEventListener(ResultEvent.RESULT, setAccionSolic);
						wsMS.setAccionSolic.send(tipoAccion, grupo, txtCiclo.text, info.periodicidad, info.solicitado, info.autorizado,
													 info.diaJunta, info.diasGracia, info.interes, info.duracion, info.pagoCapital,
													 info.pagoInteres, info.instrumento, info.factorTasa, info.metodoAplic, info.metodoCobro,
													 info.formaDist, "G", info.situacion, info.aplican, info.fecEntre, info.fecSolic, info.cdgTipoProd,
													 info.cdgProdCred, info.moneda, info.presidente, info.tesorero, info.secretario, 
													 global.obtenerUsuario(), info.formaEntre, info.nombreCheq, info.cdgCb, info.tipoDes, info.pagoMicroSeg, 
													 info.multPerio, suc, promotor, info.tasaFija, acred, montos, proyInv, tipoSeguro, emplGenH, emplGenM, 
													 emplSostH, emplSostM, info.calle, info.cdgLugarEntFed, info.cdgLugarMun, info.cdgLugarLoc, info.cdgLugarCol,
													 info.horario, info.reunion, situacionAcred, causaBaja, info.clnsRel, info.tipoProdRel, info.cdgclnsRel,
													 info.cicloRel, aval);
					}
					//Servicio invocado en la etapa de evaluacion de la solicitud
					else if(currentState == 'evaluacion'){
						if(validaSituacion() == true){
							wsMS.addEventListener(ResultEvent.RESULT, setAccionEvSolic);
							wsMS.setAccionEvSolic.send(grupo, txtCiclo.text, info.periodicidad, info.solicitado, info.autorizado,
													   		info.diaJunta, info.diasGracia, info.interes, info.duracion, info.pagoCapital,
													   		info.pagoInteres, info.instrumento, info.factorTasa, info.metodoAplic, info.metodoCobro,
													   		info.formaDist, "G", info.situacion, info.aplican, info.fecEntre, info.fecSolic, info.cdgTipoProd,
													   		info.cdgProdCred, info.moneda, info.presidente, info.tesorero, info.secretario, global.obtenerUsuario(), 
													   		info.formaEntre, info.nombreCheq, info.pagoMicroSeg, info.multPerio, suc, promotor, info.tasaFija,
													  	 	acred, montos, proyInv, situacionAcred, rechazo, cantAutorAcred, info.calle, info.cdgLugarEntFed,
													  	 	info.cdgLugarMun, info.cdgLugarLoc, info.cdgLugarCol, info.horario, info.reunion,
													  	 	info.excepcion, info.observacion, info.excAcred, info.lstAcred, info.obsAcred, info.insDoc, info.integracion,
													  	 	reporte);
						}
						else{
							wsMS.disconnect();
							global.desbloquear();
							du.rCursor();
						}
					}
				}
			}
			
			public function iniciaSituacion(event:FlexEvent):void{
				ComboBox(event.currentTarget).dataProvider = situacion;
			}
			
			public function init():void{
				openEffect.duration = 500;
				openEffect.play([this]);
				du = new Utils();
				global = new Globales();
				titulo = "Mantenimiento de Solicitud";
				formateaSituacion();
			}
			
			private function initConexion():void{				
				wsMS = new WebService();			
				wsMS.wsdl = Application.application.wsStr.wsdlServ.toString();
				wsMS.loadWSDL();
			}	
			
			private function initConexionEmail():void{				
				wsEmail = new WebService();			
				wsEmail.wsdl = Application.application.wsStr.wsdlEmail.toString();
				wsEmail.loadWSDL();
			}
			
			private function initConexionReg():void{				
				wsReg = new WebService();			
				wsReg.wsdl = Application.application.wsStr.wsdlReg.toString();
				wsReg.loadWSDL();
			}
			
			private function initConexionPayCash():void{				
				wsPayCash = new WebService();			
				wsPayCash.wsdl = Application.application.wsStr.wsdlPcr.toString();
				wsPayCash.loadWSDL();
			}
			
			public function limpiaSituacion(indice:int):void{
				Arr[indice].solicitado = false;
				Arr[indice].autorizado = false;
				Arr[indice].rechazado = false;
				Arr[indice].rechazo = "";
				dgAcredEv.dataProvider = Arr;
			}

			public function llenaRegistros():void{
				var numInt:int;
				info = new DatosSolic();
				if(currentState != null)
					estatus = currentState.toString();
					
				info.cdgGrupo = _xmlSolic.Table[0].CDGNS;
				info.ciclo = _xmlSolic.Table[0].CICLO;
				
				//Datos de producto de la solicitud
				info.cdgTipoProd = _xmlSolic.Table[0].CDGTPC;
				info.cdgProdCred = _xmlSolic.Table[0].CDGPCR;
				
				//Datos generales de la solicitud
				info.fecSolic = _xmlSolic.Table[0].FECSOLIC;
				info.fecEntre = _xmlSolic.Table[0].FECINICIO;
				info.situacion = _xmlSolic.Table[0].SITUACION;
				info.solicitado = _xmlSolic.Table[0].CANTSOLIC;
				info.autorizado = _xmlSolic.Table[0].CANTAUTOR;
				info.moneda = _xmlSolic.Table[0].CDGMO;
				
				//Datos del calendario de la solicitud
				info.periodicidad = _xmlSolic.Table[0].PERIODICIDAD;
				info.reunion = _xmlSolic.Table[0].NOACUERDO;
				info.diaJunta = _xmlSolic.Table[0].DIAJUNTA;
				info.diasGracia = _xmlSolic.Table[0].DESFASEPAGO;
 				info.duracion = _xmlSolic.Table[0].DURACION; 
				info.pagoCapital = _xmlSolic.Table[0].PERIGRCAP;
				info.pagoInteres = _xmlSolic.Table[0].PERIGRINT;
				info.multPerio = _xmlSolic.Table[0].MULTPER;
				info.horario = _xmlSolic.Table[0].HORARIO;
				
				//Tasas de la solicitud
				info.metodoCobro = _xmlSolic.Table[0].CDGMCI;
				info.formaDist = _xmlSolic.Table[0].CDGFDI;
				info.instrumento = _xmlSolic.Table[0].CDGTI;
				info.interes = _xmlSolic.Table[0].TASA;
				
				//Datos de recargos de la solicitud
				info.metodoAplic = _xmlSolic.Table[0].METRECA;
				info.aplican = _xmlSolic.Table[0].MODOAPLIRECA;
				info.tasaFija = _xmlSolic.Table[0].TASARECFIJ;
				info.factorTasa = _xmlSolic.Table[0].TASARECTAS;
				
				//Datos de la mesa directiva del grupo
				info.presidente = _xmlSolic.Table[0].PRESIDENTE;
				info.secretario = _xmlSolic.Table[0].SECRETARIO;
				info.tesorero = _xmlSolic.Table[0].TESORERO;
				
				//Datos de entrega de la solicitud
				info.formaEntre = _xmlSolic.Table[0].FORMAENTREGA;
				info.nombreCheq = _xmlSolic.Table[0].NOMBRECH;
				info.cdgCb = _xmlSolic.Table[0].CDGDO;
				info.tipoDes = _xmlSolic.Table[0].CDGDOF;
				info.pagoMicroSeg = _xmlSolic.Table[0].PAGOMICROSEG;
				
				numInt = Number(_xmlSolic.Table[0].NUMINT);
				
				info.tipoProdRel = _xmlSolic.Table[0].CDGTPCREL;
				info.cdgclnsRel = _xmlSolic.Table[0].CDGCLNSREL;
				info.cicloRel = _xmlSolic.Table[0].CICLOREL;
				info.clnsRel = _xmlSolic.Table[0].CLNSREL;
				
				tipoProdRel = info.tipoProdRel;
				
				//bandMod indica si la informacion de la solicitud puede modificarse
				if(info.situacion == 'S' || bandMod == true)		
					formProdSolic.prodCredObj.addEventListener(CollectionEvent.COLLECTION_CHANGE, actualizaListaProd);
				//Categoria de producto OP = oportuno
				formProdSolic.init("OP", this.grupo, this.ciclo, this.clns, numInt, info, 2);
				formDatosGralSolic.dtfEntrega.addEventListener(CalendarLayoutChangeEvent.CHANGE, actualizaFecEntre);
				formDatosGralSolic.dtfSolicitud.addEventListener(CalendarLayoutChangeEvent.CHANGE, actualizaFecSolic);
				formDatosGralSolic.init(info, 2, estatus);
				
				if(tipoProdRel == "01")
					formCalendarioSolic.init(info, 2, estatus);
				else if(tipoProdRel == "04"){
					cambiaFormCal(tipoProdRel);
					formCalendarioSol.init(info, 2, estatus);
				}
				formTasasSolic.init(info, 2, estatus);
				formRecargosSolic.init(info, 2, estatus);
				formEntregaSolic.init(info, 2, estatus);
				formRelacSolic.init(this.grupo, info, 2, estatus);
				if(currentState == 'evaluacion'){
					formExcepcionEv.init(info, 2, estatus);
					formAnalisis.init(info,2,estatus);
				}
			}
			
			public function modificaHorario():void{
				enviarHorario();
			}
			
			public function modificaSolic():void{
				if(formDatosGralSolic.situacion.selectedValue == 'S')
					enviar();
				else
					Alert.show("No es posible guardar los cambios realizados en la solicitud.\n\nModifique la situación seleccionada actualmente.",titulo,4,null,null,global.iAlert);
			} 
			
			public function muestraDatosAval():void{
				if( _xmlSolic == "" || _xmlSolic.Table[0].SITUACION == 'S'){
					indAcred = dgAcred.selectedIndex;
					if(indAcred >= 0){
						var res:Boolean;
						//OBTIENE INFORMACION DEL CONTROL DE CREDITO RELACIONADO
						var tipoProd:String = formRelacSolic.cboTipoProd.selectedItem.id;
						var tipoCred:String = "G";
						var cdgclnsRel:String = formRelacSolic.txtCodigo.text;
						var cicloRel:String = formRelacSolic.txtCiclo.text;
						if(validaCredRelac(tipoCred, tipoProd, cdgclnsRel, cicloRel)){
							comAvalAcred = new AvalAcred();
							comAvalAcred = AvalAcred(PopUpManager.createPopUp(this,AvalAcred,true));
							comAvalAcred.addEventListener("seleccionar", actualizaDatos);
							comAvalAcred.init(tipoProd, tipoCred, cdgclnsRel, cicloRel, grupo, "G");
							PopUpManager.centerPopUp(comAvalAcred);
						}
					}		
				}
			}
			
			public function muestraReporte():void{
				var indice:int = dgAcredEv.selectedIndex;
				var comMttoReporte:MttoReporte = new MttoReporte();
				comMttoReporte = MttoReporte(PopUpManager.createPopUp(this,MttoReporte,true));
				comMttoReporte.init(Arr, indice);
				PopUpManager.centerPopUp(comMttoReporte);
			}
			
			private function registraCausaBaja(event:Event):void{
				var comCausaBaja:RegCausaBaja = event.currentTarget as RegCausaBaja;
				Arr[indAcred].causaBaja = comCausaBaja.obtieneCausa();
				Arr[indAcred].sitAcred = "B";
			}
			
			private function registraCausaRechazo(event:ListEvent):void{
				Arr[indAcred].rechazo = ComboBox(event.currentTarget).selectedItem.id;
			}
			
			public function registraInfoSolic(cdgGrupo:String, nomGrupo:String, nomSuc:String, suc:String, promotor:String):void{
				var wsCat:WebService = new WebService();
				var params:Array = new Array();
				var numInt:int;
				
				tipoAccion = 1;
				init();
				if (currentState != null)
					estatus = currentState.toString();
				var fecSolic:String = global.formatearFecha(global.obtenerFechaSistema());
				this.suc = suc;
				//ASIGNACION DE CODIGO DE GRUPO
				this.grupo = cdgGrupo;
				this.clns = "G";
				this.promotor = promotor;
				txtGrupo.text = nomGrupo;
				txtSucursal.text = nomSuc;
				
				du.initWsCat(wsCat);
				du.sCursor();
					
				du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
					var ciclo:String = evt.result.toString();
					
					this.ciclo = ciclo;
					txtCiclo.text = ciclo;
					
					du.ejecutaWsMethod(wsCat,function(ev:ResultEvent):void {											
						var _xmlInt:XML = new XML(ev.result);
					
						numInt =  Number(_xmlInt.Table[0].NUMINT);
					
						du.rCursor();
						du.closeWs(wsCat);
						
						cargaAcred(cdgGrupo, "", fecSolic);
						info = null;
						formProdSolic.addEventListener("actualiza", actualizaProdCred);
						formProdSolic.init("OP", grupo, ciclo, clns, numInt, info, 1, suc);
						formDatosGralSolic.dtfSolicitud.addEventListener(CalendarLayoutChangeEvent.CHANGE, actualizaFecSolic);
						formDatosGralSolic.dtfEntrega.addEventListener(CalendarLayoutChangeEvent.CHANGE, actualizaFecEntre);
						formDatosGralSolic.init(info, 1, estatus);
						//para este tipo de solicitud inhabilita los controles de horario 
						formCalendarioSolic.desactivaContHorario();
						formCalendarioSolic.init(info, 1, estatus);
						formTasasSolic.init(info, 1, estatus);
						formEntregaSolic.init(info, 1, estatus);
						formRelacSolic.addEventListener("validarCredRel",actualizaCredRelac);
						formRelacSolic.init(grupo, info, 1, estatus);
					}); 	
					params[0] = grupo;
					wsCat.getInfoGrupo.send(3, params);
				});
				params[0] = this.grupo;
				params[1] = this.clns
				wsCat.getInfoGeneral.send(1, params);
			} 
			
			public function selAutorizadoAcredEv(event:Event):void{
				indAcred = dgAcredEv.selectedIndex;
				var vScroll:Number = dgAcredEv.verticalScrollPosition;
				limpiaSituacion(indAcred);
				Arr[indAcred].autorizado = true;
				Arr[indAcred].sitAcred = 'A';
				Arr[indAcred].situacion = 'Autorizado';
				if(Number(_xmlAcred.Table[indAcred].CANTAUTOR) == 0)
					Arr[indAcred].cantAutor = Arr[indAcred].cantSolic;
				if(Number(_xmlAcred.Table[indAcred].CANTAUTOR) > 0)
					Arr[indAcred].cantAutor = _xmlAcred.Table[indAcred].CANTAUTOR;	
				dgAcredEv.dataProvider = Arr;
				dgAcredEv.validateNow();
				dgAcredEv.selectedItem = indAcred;
				dgAcredEv.verticalScrollPosition = vScroll;
				calculaMontoAutorizado();
				//establece la situacion general como autorizado 
				formDatosGralSolic.situacion.selectedValue = Arr[indAcred].sitAcred;
			}
			
			public function selRechazadoAcredEv(event:Event):void{
				indAcred = dgAcredEv.selectedIndex;
				var vScroll:Number = dgAcredEv.verticalScrollPosition;
				var rechazoAct:String;
				var comRechazo:RegRechazo;
				comRechazo = new RegRechazo();
				comRechazo = RegRechazo(PopUpManager.createPopUp(this,RegRechazo,true));
				if(Arr[indAcred].rechazado == false){
					comRechazo.cboRechazo.addEventListener(ListEvent.CHANGE, registraCausaRechazo);
					rechazoAct = "";
					comRechazo.init(-1, rechazoAct);
					PopUpManager.centerPopUp(comRechazo);	
				}
				else{
					comRechazo.cboRechazo.addEventListener(ListEvent.CHANGE, registraCausaRechazo); 
					rechazoAct = Arr[indAcred].rechazo;
					comRechazo.init(indAcred, rechazoAct);
					PopUpManager.centerPopUp(comRechazo);
				}
				limpiaSituacion(indAcred);
				Arr[indAcred].rechazado = true;
				Arr[indAcred].sitAcred = 'R';
				Arr[indAcred].situacion = 'Rechazado';
				Arr[indAcred].cantAutor = 0;
				Arr[indAcred].rechazo = rechazoAct;
				dgAcredEv.dataProvider = Arr;
				dgAcredEv.validateNow();
				dgAcredEv.selectedItem = indAcred;
				dgAcredEv.verticalScrollPosition = vScroll;
				calculaMontoAutorizado();
				validaSituacionGral(Arr[indAcred].sitAcred);
			}
			
			public function selSolicitadoAcredEv(event:Event):void{
				indAcred = dgAcredEv.selectedIndex;
				var vScroll:Number = dgAcredEv.verticalScrollPosition;
				limpiaSituacion(indAcred);
				Arr[indAcred].solicitado = true; 
				Arr[indAcred].sitAcred = 'S';
				Arr[indAcred].situacion = 'Solicitado';
				if(Number(_xmlAcred.Table[indAcred].CANTAUTOR) == 0)
					Arr[indAcred].cantAutor = 0                                                                                                                                                         
				if(Number(_xmlAcred.Table[indAcred].CANTAUTOR) > 0)
					Arr[indAcred].cantAutor = _xmlAcred.Table[indAcred].CANTAUTOR;	
				dgAcredEv.dataProvider = Arr;
				dgAcredEv.validateNow();
				dgAcredEv.selectedItem = indAcred;
				dgAcredEv.verticalScrollPosition = vScroll;
				calculaMontoAutorizado();
				validaSituacionGral(Arr[indAcred].sitAcred);
			}
			
			public function selSituacion(event:ItemClickEvent):void{
				var situacion:String = RadioButtonGroup(event.currentTarget).selection.label;
				actualizaSituacion(situacion);
			}
			
			public function selSituacionAcred(event:Event):void{
				indAcred = dgAcred.selectedIndex;
				var situacion:String = ComboBox(event.currentTarget).selectedLabel;
				if(situacion == "Solicitado")
					Arr[indAcred].sitAcred = "S"; 
				else if(situacion == "No Renueva"){
					var comCausaBaja:RegCausaBaja = new RegCausaBaja();
					comCausaBaja = RegCausaBaja(PopUpManager.createPopUp(this,RegCausaBaja,true));
					comCausaBaja.addEventListener("enviar", registraCausaBaja);
					comCausaBaja.init();
					PopUpManager.centerPopUp(comCausaBaja);	
				}
			}
			
			private function setAccionEvSolic(event:ResultEvent):void{
				wsMS.disconnect();
				du.rCursor();
				global.desbloquear();
				wsMS.removeEventListener(ResultEvent.RESULT, setAccionEvSolic);
				var res:String = event.result.toString();
				
				if (res.substr(0,1) == "1"){
					var wsCat:WebService = new WebService;
					var params:Array = new Array;
					
					du.initWsCat(wsCat);
					du.sCursor();
					global.bloquear();
					
					du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
						var _xmlEv:XML = new XML(evt.result);
						
						//Condicion que valida la existencia de la Evaluacion de Credito
						if(_xmlEv.elements().length() > 0){
							var destino:String;
							var asunto:String = _xmlEv.Table[0].ASUNTO;
							var resultado:String = "<br>" + _xmlEv.Table[0].RESULTADO;
							var emailOri:String = _xmlEv.Table[0].EMAILORI;
							var emailAse:String = _xmlEv.Table[0].EMAILASE;
							//var emailCoord:String = _xmlEv.Table[0].EMAILCOORD;
							var emailGte:String = _xmlEv.Table[0].EMAILGTE;
							var emailReg:String = _xmlEv.Table[0].EMAILREG;
							//var emailDir:String = _xmlEv.Table[0].EMAILDIR;
							var insDoc:String = _xmlEv.Table[0].INSDOC.toString() != ""? _xmlEv.Table[0].INSDOC: "SIN INCIDENCIAS";
							var integ:String = _xmlEv.Table[0].INTEGRACION.toString() != ""? _xmlEv.Table[0].INTEGRACION + "<br>": "";
							
							resultado = resultado.replace(/-/g,"<br>");
							
							resultado += "<br><br>INCIDENCIAS DOCUMENTALES:<br>" + insDoc;
							
							destino = emailAse != ""? emailAse : "";
							//destino += (emailCoord != ""? ((destino != ""? ",": "") + emailCoord) : "");
							destino += (emailGte != ""? ((destino != ""? ",": "") + emailGte) : "");
							destino += (emailReg != ""? ((destino != ""? ",": "") + emailReg) : "");
							//destino += (emailDir != ""? ((destino != ""? ",": "") + emailDir) : ""); 
							
							du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
								var _xmlEvAc:XML = new XML(evt.result);
								var reporte:String = "";
								var tabla:String = "";
								
								var cont:int = _xmlEvAc.elements().length();
								
								if(cont > 0){
									for(var i:int = 0; i < cont; i++){
										if(_xmlEvAc.Table[i].REPACRED && _xmlEvAc.Table[i].REPACRED.toString() != "")
											reporte += _xmlEvAc.Table[i].CDGCL + " " + _xmlEvAc.Table[i].NOMCL + " " + _xmlEvAc.Table[i].REPACRED + "<br>";
									}
								}
								if(reporte == "")
									reporte = "SIN INCIDENCIAS";
									
								if(cont > 0){
									for(var i:int = 0; i < cont; i++){
										if(_xmlEvAc.Table[i].NOMBRE){
										tabla += "<tr>" + 
													"<td style='border-style:solid;'> "+_xmlEvAc.Table[i].NOMCL+"</td>" + 
													"<td style='border-style:solid;'> "+_xmlEvAc.Table[i].CANTSOLIC+"</td>" + 
													"<td style='border-style:solid;'> "+_xmlEvAc.Table[i].CANTAUTOR +"</td>" + 
												"</tr>";
										}
									}
								}
								if(tabla == "")
									tabla = "SIN INFORMACIÓN";
									
								du.ejecutaWsMethod(wsCat,function(evt:ResultEvent):void {											
									var _xmlEvExc:XML = new XML(evt.result);
									var repExc:String = "";
									
									du.rCursor();
									du.closeWs(wsCat);
									
									var contExc:int = _xmlEvExc.elements().length();
									var contenido:String = "";
								
									if(contExc > 0){
										for(var j:int = 0; j < contExc; j++)
											repExc += (repExc != ""? "<br>": "") + _xmlEvExc.Table[j].ACRED + " " + _xmlEvExc.Table[j].NOMBRE + " " + _xmlEvExc.Table[j].DESCRIPCION + " " + _xmlEvExc.Table[j].OBSERVACION;
									}
									
									integ = integ + repExc;
									if(integ == "")
										integ = "SIN INCIDENCIAS";
									
									//Se incorpora la cadena de enanos de grupo
									resultado += "<br><br>INTEGRACIÓN:<br>" + integ;
									resultado += "<br><br>REPORTE DE CRÉDITO:<br>" + reporte;
									
									contenido = "<tr>" + 
													"<td style='color: #000000;  font-size: 18px; font-family: Century Gothic, CenturyGothic, AppleGothic, sans-serif; padding: 10px 20px 40px 20px; text-align: center;'>" + 
														"<p style='text-align: left'><span>"+ resultado +"</span></p>" + 
													"</td>" + 
												"</tr>" + 
												"<tr>" + 
													"<td>" + 
														"<table style='width:100%; border-collapse: collapse; font-size: 18px; font-family: Century Gothic, CenturyGothic, AppleGothic, sans-serif; text-align: center;'>" + 
															"<tr>" + 
																"<th style='border-style:solid;'>NOMBRE ACREDITADO</th>" + 
																"<th style='border-style:solid;'>CANT SOLICITADA</th>" + 
																"<th style='border-style:solid;'>CANT ENTREGADA</th>" + 
															"</tr>" + 
															tabla + 
															
														"</table>" + 
													"</td>" + 
												"</tr>";
							
									initConexionEmail();
									du.sCursor();
								
									du.ejecutaWsMethod(wsEmail,function(evt:ResultEvent):void {											
										var resEnv:String = evt.result.toString();
										
										du.rCursor();
										du.closeWs(wsEmail);
										
										//PENDIENTE IMPLEMENTAR EVALUACION DE NIVEL DE RIESGO
										//DE FORMA SINCRONA INVOCANDO EL METODO EVALUANIVELRIESGO()
										global.desbloquear();
										cerrar();
									});
									//Envio de correo electronico correspondiente al resultado de la evaluacion de credito
									wsEmail.setEnviaEmail.send(emailOri,destino,asunto,contenido);
								});
								//Metodo que obtiene el resultado de las excepciones de la evaluacion de credito
								params[0] = grupo;
								params[1] = ciclo;
								params[2] = clns;
								params[3] = global.obtenerUsuario();
								wsCat.getInfoGeneral.send(10, params);
							});
							params[0] = this.grupo;
							params[1] = this.ciclo;
							params[2] = this.clns;
							params[3] = this.solicitud;
							wsCat.getInfoGeneral.send(9, params);
						}
						else{
							global.desbloquear();
							Alert.show("No se ha encontrado la Evaluación del Área de Crédito",titulo,4,null,null,global.iAlert);
						}
					});
					params[0] = this.grupo;
					params[1] = this.ciclo;
					params[2] = this.clns;
					params[3] = this.solicitud;
					wsCat.getInfoGeneral.send(8, params);
				}
				else if(res.substr(0,1) == "2")
					cerrar();	
				else
					Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);		
			}
			
			private function setAccionSolic(event:ResultEvent):void{
				wsMS.disconnect();
				du.rCursor();
				wsMS.removeEventListener(ResultEvent.RESULT, setAccionSolic);
				var res:String = event.result.toString();
				if (res.substr(0,1) == "1"){
					initConexionPayCash();
					du.sCursor();
						
					du.ejecutaWsMethod(wsPayCash,function(evt:ResultEvent):void {
						var res:String = evt.result.toString();			
						
						du.rCursor();
						du.closeWs(wsPayCash);
						global.desbloquear();
						cerrar();
					});
					wsPayCash.getInfoPayCashCorta.send(grupo, info.cdgTipoProd, global.obtenerUsuario());
				}
				else{
					Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);
					global.desbloquear();
				}		
			}
			
			private function setModHorario(event:ResultEvent):void{
				wsMS.disconnect();
				du.rCursor();
				global.desbloquear();
				wsMS.removeEventListener(ResultEvent.RESULT, setModHorario);
				var res:String = event.result.toString();
				if (res.substr(0,1) == "1")
					cerrar();
				else
					Alert.show(res.substr(2,res.length -1),titulo,4,null,null,global.iAlert);		
			}
			
			//Funcion que valida que los registros autorizados tengan una cantidad mayor a 0
			public function validaAutorizado():Boolean{
				for(var i:int = 0; i < Arr.length; i++){
					if(Arr[i].sitAcred == 'A' && Arr[i].cantAutor == 0){
						Alert.show("El préstamo del acreditado " + Arr[i].nombre + " fue autorizado sin monto.\n\nVerifique la información capturada.",titulo,4,null,null,global.iAlert);
						return false;
					}
				}
				return true;
			}
			
			private function validaCredRelac(clns:String, tipoProd:String, cdgclns:String, ciclo:String):Boolean{
				if(clns == ""){
					Alert.show("Debe seleccionar el Tipo de Crédito relacionado.",titulo,4,null,null,global.iAlert);
					return false;
				}
				if(tipoProd == ""){
					Alert.show("Debe seleccionar el Tipo de Producto relacionado.",titulo,4,null,null,global.iAlert);
					return false;
				}
				if(cdgclns == ""){
					Alert.show("Debe seleccionar el Código del Crédito relacionado.",titulo,4,null,null,global.iAlert);
					return false;
				}
				if(ciclo == ""){
					Alert.show("Debe seleccionar el Ciclo del Crédito relacionado.",titulo,4,null,null,global.iAlert);
					return false;
				}
				return true;
			}
			
			public function validaDatosSolic(event:EventSolic):void{
				info = event.customProp;
			}
			
			public function validaFinal():void{
				if (info.guardaProd == true && info.guardaDatos == true && info.guardaCalendario == true && info.guardaTasas == true && 
					info.guardaRecargos == true && info.guardaEntre == true && info.guardaRelac == true)
					guardaSolic();
				else
					Alert.show("Debe capturar los datos requeridos",titulo,4,null,null,global.iAlert);
			}
			
			public function validaHorario():void{
				if (info.guardaCalendario == true)
					guardaHorario();
				else
					Alert.show("Debe capturar los datos requeridos",titulo,4,null,null,global.iAlert);
			}
			
			public function validaMonto(event:Event):void{	
				numVal.source = TextInput(event.currentTarget);
				vResult = numVal.validate();

				if (vResult.type!=ValidationResultEvent.VALID)
                	TextInput(event.currentTarget).text = "";
			}
			
			public function validaSituacion():Boolean{
				//condicion que verifica la situacion de la solicitud
				if(info.situacion != 'S'){
					for(var i:int = 0; i < Arr.length; i++){
						if(Arr[i].sitAcred == 'S'){
							Alert.show("El acreditado " + Arr[i].nombre + " se encuentra en situación " + Arr[i].situacion + ".\n\nModifique la condición del cliente",titulo,4,null,null,global.iAlert);
							return false;
						}
					}
				}
				if(info.situacion == 'S'){
					for(var j:int = 0; j < Arr.length; j++){
						if(Arr[j].sitAcred != 'S'){
							Alert.show("El acreditado " + Arr[j].nombre + " se encuentra en situación " + Arr[j].situacion + ".\n\nModifique la condición del cliente",titulo,4,null,null,global.iAlert);
							return false;
						}
					}
				}
				return true;
			}
			
			//Funcion que modifica la situacion de la solicitud 
			//basandose en la situacion que presentan todos los acreditados
			public function validaSituacionGral(situacion:String):void{
				var band:Boolean = true;
				for(var i:int = 0; i < Arr.length; i++){
					if(situacion != Arr[i].sitAcred)
						band = false;
				}
				if(band == true)
					formDatosGralSolic.situacion.selectedValue = situacion;
			}
			
			//Funcion que valida que los registros solicitados tengan una cantidad mayor a 0
			public function validaSolicitado():Boolean{
				return true;
			}
			
			private function validaAval():Boolean{
				for(var i:int = 0; i < Arr.length; i++){
					if(Arr[i].aval == ""){
						Alert.show("El acreditado " + Arr[i].nombre + " no tiene Aval registrado.\n\nVerifique la información capturada.",titulo,4,null,null,global.iAlert);
						return false;
					}
				}
				return true;
			}
		]]>
	</mx:Script>

	 <mx:NumberValidator id="numVal" property="text" precision="2"
        allowNegative="true" domain="real" decimalSeparator="." thousandsSeparator="," required="false"/>

	<mx:TabNavigator id="tabNav" width="824" height="251" x="10" y="52" creationPolicy="all">	
		<mx:Canvas label="Producto" width="100%" height="100%">
			<Forms:FormProductoSolic id="formProdSolic" x="140" y="39" width="540" height="130"/>
		</mx:Canvas>
		<mx:Canvas label="Datos Generales" width="100%" height="100%">	
			<Forms:FormDatosGralSolic id="formDatosGralSolic" height="195" width="800" x="10" y="10"/>
		</mx:Canvas>
		<mx:Canvas id="cvnCalendario" label="Calendario" width="100%" height="100%">	
			<Forms:FormCalendarioSolic id="formCalendarioSolic" x="75" height="205"/>
		</mx:Canvas>
		<mx:Canvas label="Tasas" width="100%" height="100%">	
			<Forms:FormTasasSolic id="formTasasSolic" x="55" height="195" y="10"/>
		</mx:Canvas>
		<mx:Canvas label="Recargos" width="100%" height="100%">	
			<Forms:FormRecargosSolic id="formRecargosSolic" x="60"/>
		</mx:Canvas>
		<mx:Canvas label="Entrega" width="100%" height="100%" id="canvas2">	
			<Forms:FormEntregaSolicAd id="formEntregaSolic" x="75"/>
		</mx:Canvas>
		<mx:Canvas label="Relacionado" width="100%" height="100%">
			<Forms:FormRelacionadoSolic id="formRelacSolic" x="141" y="48" width="540" height="110"/>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Button id="btnCancelar" x="790" y="526" width="40" icon="@Embed(source='assets/images/iconCancel.png')" click="cerrar()"/>
	<mx:Button id="btnAceptar" x="742" y="526" width="40" icon="@Embed(source='assets/images/iconAccept.png')" click="enviar()"/>
	<mx:Canvas x="87" y="10" width="670" height="37" styleName="canvasMod">
		<mx:Label x="13" y="8" text="Grupo Solidario:"/>
		<mx:TextInput id="txtGrupo" x="99" y="5" width="199" editable="false"/>
		<mx:Label x="311" y="8" text="Ciclo:"/>
		<mx:Label x="422" y="8" text="Sucursal:"/>
		<mx:TextInput x="477" y="5" width="181" id="txtSucursal" editable="false"/>
		<mx:TextInput x="345" y="5" width="45" id="txtCiclo" editable="false"/>
	</mx:Canvas>
	<mx:Canvas x="10" y="311" width="824" height="209" styleName="canvasMod" id="canvas1">
		<mx:DataGrid id="dgAcred" x="19.5" y="10" width="783" height="187" 
		    editable="true" sortableColumns="false" >
			<mx:columns>
				<mx:DataGridColumn headerText="CODIGO" editable="false" dataField="codigo" width="50"/>
				<mx:DataGridColumn headerText="ACREDITADO" editable="false" dataField="nombre" width="170"/>
				<!--<mx:DataGridColumn headerText="SOLICITUD" editable="false" dataField="solicitud" width="50"/>-->
				<mx:DataGridColumn headerText="SOLICITADO" dataField="cantSolic" width="70" editable="true" >	
					<mx:itemEditor>
						<mx:Component>
		  					<mx:TextInput width="30" fontSize="10" verticalCenter="0" focusOut="outerDocument.calculaMonto()" change="outerDocument.validaMonto(event)" restrict="0-9;."/> 
		  				</mx:Component>
					</mx:itemEditor>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="AVAL" editable="false" dataField="nomAval" width="170">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Label click="outerDocument.muestraDatosAval()" width="50"/>
		  				</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:Button id="btnGuardarHor" x="10" y="529" label="Modificar Horario" width="120" click="modificaHorario()" visible="false"/>
</mx:TitleWindow>